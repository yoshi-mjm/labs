[
  {
    "objectID": "jsPsych-01.html",
    "href": "jsPsych-01.html",
    "title": "jsPsych 演習: 第1回",
    "section": "",
    "text": "心理学の調査や実験、みなさんはどんなイメージがありますか？紙のアンケート、コンピュータを使った反応時間の測定、脳波の計測…いろいろありますよね。\njsPsych は、そんな心理学の調査や実験をウェブサイト上で作れるようにするための、特別な道具（ライブラリと呼びます）です。\n「プログラミングって難しそう…」と思うかもしれませんね。でも安心してください！jsPsych を使えば、難しいプログラミングの知識がなくても、簡単なコードを書くだけで、本格的な心理学の調査や実験が作れるようになります。\n\n\n\n誰でもどこでも参加できる！ インターネットにつながっていれば、パソコンでもタブレットでも、どこからでも調査や実験に参加してもらえます。大学に来てもらわなくても、自宅で実施できるので、たくさんの人に協力してもらいやすくなります。\n正確な時間測定ができる！ 反応時間など、ミリ秒単位の正確な時間測定が必要な実験も、jsPsych ならバッチリ対応できます。心理学の実験では、こうした正確さがとても大切なんです。\n複雑な調査・実験も作れる！ 質問の順番をランダムに変えたり、参加者の回答に応じて次に表示する質問を変えたり、画像や音を使った実験も自由自在です。\n\n今日のゴールは、jsPsych を使って簡単な質問票を自分で作り、パソコンで動かしてみることです。一緒に楽しく学んでいきましょう！\n\n\n\n\n\njsPsych で調査・実験を作るためには、いくつかの準備が必要です。難しそうに聞こえるかもしれませんが、ひとつずつ一緒にやっていきましょう！\n\n\nVS Code は、プログラミングをするための「高機能なメモ帳」のようなものです。これを使うと、コードがとても書きやすくなります。\n\nダウンロードサイトへアクセス: 以下のVS Codeの公式サイトにアクセスしてください。https://code.visualstudio.com/\nダウンロード: 使っているパソコンのOS（Windows、macOSなど）に合わせて、ダウンロードボタンをクリックします。\nインストール: ダウンロードしたファイルをダブルクリックして、画面の指示に従ってインストールを進めてください。特に難しい設定は必要ありません。「次へ」「同意する」「インストール」などをクリックしていけばOKです。\n\nMacの場合: アプリケーションフォルダにドラッグ&ドロップするだけです。\n\n日本語化 (任意): VS Code を起動して，英語表示になっていたら日本語に切り替えましょう。\n\n左側の四角が並んだアイコン（拡張機能）をクリックします。\n検索窓に「Japanese Language Pack for Visual Studio Code」と入力して検索します。\n表示された拡張機能の「Install」ボタンをクリックします。\nインストール後、VS Code の再起動を求められるので、再起動します。\n\n\n\n\n\n作った調査や実験をウェブブラウザで確認するために、「Live Server」という便利な機能を使います。これは、VS Code の「拡張機能」として追加できます。\n\n拡張機能を開く:: VS Code の左側にある四角が並んだアイコン（拡張機能）をクリックします。\nLive Server を検索:: 検索窓に「Live Server」と入力して検索します。\nインストール:: 表示された「Live Server」の拡張機能の「Install」ボタンをクリックします。これで準備完了です！\n\n\n\n\njsPsych で作ったものは、ウェブブラウザ（Google Chromeなど）で動かします。特に指定がなければ、Google Chrome を使うのがおすすめです。開発者向けの便利な機能がたくさん搭載されています。\nもしGoogle Chromeが入っていない場合は、以下のサイトからダウンロードしてインストールしておきましょう。\nhttps://www.google.com/intl/ja_jp/chrome/\n\n\n\njsPsych のライブラリと必要なプラグインをダウンロードして、VS Code で使えるようにします。\n\njsPsych のダウンロード: 以下のリンクから、jsPsych の最新バージョンをダウンロードします。https://github.com/jspsych/jsPsych/releases/tag/jspsych%407.3.4\nファイルを解凍: ダウンロードした ZIP ファイルを解凍します。解凍すると、jsPsych のフォルダができます。ただし，このままでは使うのに不便なので、必要なファイルだけを取り出します。具体的には，dist フォルダの中にあるファイルのみを使います。dist フォルダの中には、jsPsych の本体やプラグインが含まれていますので，このフォルダを jsPsych フォルダとして保存します。保存先は，VS Code でプログラムを作成するフォルダとします。\n\n\nこれで、jsPsych で調査・実験を作るための基本的な準備は完了です！ 次は、実際にjsPsychの基本的な構造を見て、簡単な質問票を作ってみましょう。\n\n\n\n\njsPsych を使って心理学の調査や実験を作成する際、主に3つの種類のファイルが連携して動作します。それぞれのファイルが異なる役割を持っています。\n\nHTMLファイル (index.html): ウェブページの「骨格」を作るファイルです。jsPsych ライブラリ本体、必要なプラグイン、そして皆さんが書く JavaScript のコードを読み込む役割を担います。\nJavaScriptファイル (script.js): 調査や実験の「流れ」を記述するファイルです。どんな質問をどんな順番で表示するかといった、実験のロジックはすべてここに記述します。可読性を高めるため、このファイルを独立させます。\nCSSファイル (style.css): ページの「見た目」を整えます。文字の大きさや色、要素の配置などをここで定義します。今回は、シンプルな表示を目的としたテンプレートとして提供します。\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;jsPsych 演習&lt;/title&gt;\n    &lt;link href=\"jspsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"jspsych-display\"&gt;&lt;/div&gt;\n\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nこのファイルに、実験や調査の内容（質問文、選択肢、表示順序等）のロジックを記述します。\n\ninitJsPsych({...}):\n\njsPsych の動作を開始するための初期設定を行います。\non_finish: 実験がすべて完了した後に実行される関数を定義します。例えば、取得した実験データをブラウザの画面に表示したり、CSV形式でダウンロードさせたりする処理をここに記述します。\n\nconst timeline = [];:\n\nこれは、実験で表示する各要素（教示、質問など）を順番に並べるためのリスト（配列）です。このリストに「ブロック」を追加していくことで、実験の流れを定義します。\n\n各 const informed_consent = {...} や const age_question = {...} など:\n\nこれら一つ一つが「ブロック」と呼ばれるものです。type プロパティで、どのプラグイン（特定の機能を持つ部品）を使用するかを指定し、stimulus や questions といったプロパティで、そのブロックの具体的な表示内容や動作を設定します。\n\ntimeline.push(informed_consent);:\n\n作成したブロックを timeline のリストの最後に追加します。この順序が、実験の実行順序になります。\n\njsPsych.run(timeline);:\n\ntimeline に定義されたすべてのブロックを実行し、jsPsych の実験を動かします。\n\n\n// jsPsych のインスタンスを初期化し、実験の全体的な設定を行います。\nconst jsPsych = initJsPsych({\n    // on_finishは、すべての実験トライアルが終了したときに実行される関数です。\n    // ここでは、取得した実験データをブラウザに表示するように設定しています。\n    on_finish: function() {\n        jsPsych.data.displayData(); // 実験データをブラウザ画面に表示します。\n        // データをCSV形式でダウンロードしたい場合は、以下のコメントを解除して使用します。\n        // const csv = jsPsych.data.get().csv();\n        // jsPsych.downloadCSV(csv, 'experiment-data.csv');\n    }\n});\n\n// 実験のタイムラインを定義します。タイムラインは、実行される「ブロック」の順序を決定するリストです。\nconst timeline = [];\n\n// --- 1. インフォームドコンセントブロック ---\nconst informed_consent = {\n    type: jsPsychInstructions, // instructions プラグインを使用\n    pages: [ // 複数のページを作成できます\n        `\n        &lt;h2&gt;調査へのご協力のお願い&lt;/h2&gt;\n        &lt;p&gt;この度は、本調査にご参加いただきありがとうございます。&lt;/p&gt;\n        &lt;p&gt;本調査は、人々の意見や信念に関する研究を目的としています。\n        あなたの回答は、統計的に処理され、個人が特定できる形で公開されることは\n        一切ありません。&lt;/p&gt;\n        &lt;p&gt;調査にかかる時間は約5分です。&lt;/p&gt;\n        &lt;p&gt;ご参加は完全に任意であり、途中でいつでも中断することができます。\n        中断した場合でも、あなたに不利益が生じることはありません。&lt;/p&gt;\n        &lt;p&gt;本調査に関してご不明な点がありましたら、担当者にお尋ねください。&lt;/p&gt;\n        `,\n        `\n        &lt;p&gt;上記の調査内容について理解し、本調査に自らの意思で参加することに\n        同意しますか？&lt;/p&gt;\n        &lt;p&gt;&lt;b&gt;同意する場合は「次へ」ボタンを、同意しない場合はブラウザを閉じて\n        ください。&lt;/b&gt;&lt;/p&gt;\n        `\n    ],\n    button_label_next: '次へ', // 次のページへ進むボタンのラベル\n    button_label_previous: '戻る', // 前のページへ戻るボタンのラベル\n    show_clickable_nav: true // ボタンでページを移動できるようにする\n};\ntimeline.push(informed_consent); // 作成したインフォームドコンセントブロックをタイムラインに追加\n\n// --- 2. 個人属性の質問ブロック ---\n\n// 性別の質問\nconst gender_question = {\n    type: jsPsychSurveyMultiChoice, // 複数選択形式の質問プラグイン\n    questions: [\n        {\n            prompt: 'あなたの性別を選択してください。', // 質問文\n            options: ['男性', '女性', 'その他', '回答したくない'], // 選択肢\n            name: 'gender', // 回答データを識別するための名前\n            required: true // 回答必須にする\n        }\n    ],\n    button_label: '次へ進む', // 次のページへ進むボタンのラベル\n};\ntimeline.push(gender_question);\n\n// 年齢の質問\nconst age_question = {\n    type: jsPsychSurveyText, // テキスト入力形式の質問プラグイン\n    questions: [\n        {\n            prompt: 'あなたの年齢を入力してください。', // 質問文\n            placeholder: '例: 20', // 入力フィールドの例示テキスト\n            name: 'age', // 回答データを識別するための名前\n            required: true // 回答必須にする\n        }\n    ],\n    button_label: '次へ進む',\n};\ntimeline.push(age_question);\n\n// --- 3. 尺度教示ブロック ---\nconst scale_instructions = {\n    type: jsPsychInstructions, // instructions プラグインを使用\n    pages: [\n        `\n        &lt;h2&gt;以下のそれぞれの文章について、あなた自身の意見として、その内容が\n        どの程度正しいと思うかを、以下のスケールに従って示してください。&lt;/h2&gt;\n        &lt;p&gt;この問題に、客観的に見た正解や不正解はありませんので、あなた自身の\n        個人的な意見をお聞かせください。&lt;/p&gt;\n        &lt;p&gt;&lt;b&gt;尺度のスケール: 0% - 100% まで 10% 刻みの11件法リッカート\n        尺度&lt;/b&gt;&lt;/p&gt;\n        `\n    ],\n    button_label_next: '回答を始める', // 次のページへ進むボタンのラベル\n    button_label_previous: '戻る', // 前のページへ戻るボタンのラベル\n    show_clickable_nav: true // ボタンでページを移動できるようにする\n};\ntimeline.push(scale_instructions);\n\n// --- 4. 尺度項目の質問ブロック ---\n\n// 尺度のスケールを定義\nconst scale_options = [\n    '0%', '10%', '20%', '30%', '40%', '50%',\n    '60%', '70%', '80%', '90%', '100%'\n];\n\n// 尺度項目1\nconst item1 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、大衆には決して知らされない、とても重大なことが世界で数多く起きていると思う。',\n            options: scale_options,\n            name: 'conspiracy_item1',\n            required: true\n        }\n    ],\n    randomize_question_order: false, // 質問順序のランダム化は行わない\n    button_label: '次へ',\n};\ntimeline.push(item1);\n\n// 尺度項目2\nconst item2 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、政治家はふつう、自分たちの意思決定の本当の動機を教えてはくれないと思う。',\n            options: scale_options,\n            name: 'conspiracy_item2',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item2);\n\n// 尺度項目3\nconst item3 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、政府当局が、全ての市民を厳重に監視していると思う。',\n            options: scale_options,\n            name: 'conspiracy_item3',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item3);\n\n// 尺度項目4\nconst item4 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、表面的には関連のない出来事が、しばしば秘密の活動の結果であると思う。',\n            options: scale_options,\n            name: 'conspiracy_item4',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item4);\n\n// 尺度項目5\nconst item5 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、政治的な決定に強い影響力を与える秘密の組織が存在すると思う。',\n            options: scale_options,\n            name: 'conspiracy_item5',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item5);\n\n// --- 5. 実験終了ブロック ---\nconst end_screen = {\n    type: jsPsychHtmlKeyboardResponse, // 終了画面\n    stimulus: `\n        &lt;p&gt;質問票は以上で終了です。ご協力ありがとうございました。&lt;/p&gt;\n        &lt;p&gt;このウィンドウは閉じていただいて構いません。&lt;/p&gt;\n    `,\n    choices: \"NO_KEYS\", // キー入力では次へ進まない\n    trial_duration: 3000 // 3秒後に自動的に画面が消える（on_finishが実行される）\n};\ntimeline.push(end_screen);\n\n// すべてのブロックが定義されたタイムラインを実行して、実験を開始します。\njsPsych.run(timeline);\n\n\n\n\nこのファイルでは、jsPsych の表示領域を画面の中央に配置し、画面サイズに対して大きくなりすぎないように調整する見た目のスタイルを設定します。今回は、このスタイルシートの詳細な解説は行いませんので、以下のコードをそのままコピー＆ペーストして使用してください。\n\nbody と #jspsych-display のスタイル設定により、コンテンツが画面の中央に配置され、最大でも画面の幅と高さの90%に収まるように調整されます。\noverflow: auto; プロパティによって、もしコンテンツがこの90%の領域を超えてしまった場合でも、自動的にスクロールバーが表示されるため、内容が隠れる心配がありません。\nその他のスタイルは、文字のフォント、色、ボタンのデザインなど、基本的な表示を整えるためのものです。\n\n/* style.css */\n\n/* jsPsychの表示領域全体の設定 */\nbody {\n    display: flex; /* Flexbox を使って要素を配置 */\n    justify-content: center; /* 水平方向の中央揃え */\n    align-items: center; /* 垂直方向の中央揃え */\n    min-height: 100vh; /* 画面全体の高さを使用 */\n    margin: 0; /* body の余白をなくす */\n    background-color: #f0f0f0; /* 背景色を設定 */\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* フォントの指定 */\n    color: #333; /* 文字色 */\n}\n\n/* jsPsychのコンテンツが実際に表示される部分（id=\"jspsych-display\"） */\n#jspsych-display {\n    max-width: 90vw; /* 画面幅の90%が最大幅 */\n    max-height: 90vh; /* 画面高さの90%が最大高さ */\n    width: 100%; /* 親要素の幅に合わせて伸びる */\n    height: 100%; /* 親要素の高さに合わせて伸びる */\n    overflow: auto; /* 内容がはみ出したらスクロールできるようにする */\n    background-color: #fff; /* 背景色 */\n    padding: 20px; /* 内側の余白 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影 */\n    border-radius: 8px; /* 角を丸くする */\n    box-sizing: border-box; /* paddingやborderを幅・高さに含める */\n}\n\n/* jsPsychが自動生成するコンテンツのスタイル調整 */\n.jspsych-content {\n    text-align: center; /* テキストを中央揃え */\n    margin-bottom: 20px; /* 下に余白 */\n}\n\n/* 質問文のスタイル */\n.jspsych-stimulus {\n    font-size: 1.2em; /* フォントサイズを少し大きく */\n    margin-bottom: 25px; /* 下に余白 */\n    line-height: 1.5; /* 行の高さ */\n}\n\n/* 入力フィールドのスタイル */\n.jspsych-survey-text input[type=\"text\"] {\n    width: 80%; /* 幅 */\n    padding: 10px; /* 内側の余白 */\n    margin-top: 10px; /* 上に余白 */\n    font-size: 1em; /* フォントサイズ */\n    border: 1px solid #ccc; /* 枠線 */\n    border-radius: 4px; /* 角を丸くする */\n}\n\n/* ボタンのスタイル */\n.jspsych-btn {\n    background-color: #007bff; /* ボタンの背景色 */\n    color: white; /* 文字色 */\n    padding: 10px 20px; /* 内側の余白 */\n    border: none; /* 枠線をなくす */\n    border-radius: 5px; /* 角を丸くする */\n    cursor: pointer; /* マウスカーソルを指マークに */\n    font-size: 1em; /* フォントサイズ */\n    margin-top: 20px; /* 上に余白 */\n    transition: background-color 0.3s ease; /* ホバー時のアニメーション */\n}\n\n.jspsych-btn:hover {\n    background-color: #0056b3; /* ホバー時の背景色 */\n}\n\n/* その他、必要に応じて追加 */\n.jspsych-instructions {\n    text-align: center;\n    font-size: 1.1em;\n    line-height: 1.6;\n}\n\n\n\n\n\n\n\n実際にこれらのファイルを使ってjsPsychの実験を動かすために、以下の手順でファイルを準備してください。\n\nまず、ご自身のPCの好きな場所に新しいフォルダを作成してください。フォルダ名は、例えば jspsych_my_project など、分かりやすい名前にしましょう。\n作成したフォルダの中に、index.html、script.js、style.css という名前の新しいファイルを作成します。これらのファイルには、既に以前お伝えしたそれぞれのコードをコピー＆ペーストして保存してください。\njsPsych のライブラリファイルをダウンロードし、プロジェクトフォルダ内に配置します。\n\njsPsych の公式サイト（https://www.jspsych.org/download/）から最新版の jsPsych をダウンロードしてください。\nダウンロードした jspsych-X.X.X.zip (X.X.Xはバージョン番号) という圧縮ファイルを解凍します。\n解凍してできたフォルダの中に、jspsych.js や plugin-html-keyboard-response.js などのファイルが格納されている jspsych という名前のフォルダがあるはずです。このjspsychフォルダ全体を、先ほど作成したプロジェクトフォルダ（例: jspsych_my_project）の中にそのままコピーしてください。\n\n最終的なフォルダ構造は以下のようになります。\njspsych_my_project/\n    ├── index.html       &lt;- 皆さんが作成したHTMLファイル\n    ├── script.js        &lt;- 皆さんが作成したJavaScriptファイル\n    ├── style.css        &lt;- 皆さんが作成したCSSファイル\n    └── jspsych/         &lt;- ダウンロードしたjsPsychライブラリのフォルダ\n        ├── jspsych.js\n        ├── plugin-html-keyboard-response.js\n        ├── plugin-survey-text.js\n        ├── css/\n        │   └── jspsych.css\n        └── ... (その他のプラグインやファイル)\n\nこれで、jsPsych で簡単な質問票を作成・実行するための基本的な環境が整いました。 準備はできましたか？\n\n\n\n\n\n\n\n\nこれまでの学習を踏まえて，jsPsych を使って心理尺度の質問票を作成してみましょう。作成するのは，心理学ではとても有名な自尊感情尺度です。\n\n\n自尊感情尺度（Rosenberg Self-Esteem Scale, RSES）は、 自分自身に対する評価や感情を測定するための心理尺度です。 この尺度は、個人の自尊感情を評価するために広く使用されており、 以下のような質問が含まれています。\n\n教示文: 以下には，自分自身に対する一般的な感情について書かれた文章が表示されます。それぞれの文章にどの程度同意できるかを答えてください。1 = 強くそう思わない, 2 = そう思わない, 3 = そう思う, 4 = 強くそう思う\n項目\n\n私は，自分自身にだいたい満足している。\n時々，自分はまったくダメだと思うことがある。\n私にはけっこう長所があると感じている。\n私は，他の大半の人と同じくらいに物事がこなせる。\n私には誇れるものが大してないと感じる。\n時々，自分は役に立たないと強く感じることがある。\n自分は少なくとも他の人と同じくらい価値のある人間だ，と感じている。\n私は，自分のことを前向きに考えている。\nよく，私は落ちこぼれだと思ってしまう。\n自分のことをもうすこし尊敬できたらいいと思う。\n\n\nこの自尊感情尺度を含み，個人属性情報として，年齢，性別に加えて，最終学歴を尋ねる質問票を作成してみましょう。 なお，先ほど作成したサンプルプログラムとは，別のフォルダにするか，あるいはファイル名を変更して，別の名前で保存してください。"
  },
  {
    "objectID": "jsPsych-01.html#jspsych-って何",
    "href": "jsPsych-01.html#jspsych-って何",
    "title": "jsPsych 演習: 第1回",
    "section": "",
    "text": "心理学の調査や実験、みなさんはどんなイメージがありますか？紙のアンケート、コンピュータを使った反応時間の測定、脳波の計測…いろいろありますよね。\njsPsych は、そんな心理学の調査や実験をウェブサイト上で作れるようにするための、特別な道具（ライブラリと呼びます）です。\n「プログラミングって難しそう…」と思うかもしれませんね。でも安心してください！jsPsych を使えば、難しいプログラミングの知識がなくても、簡単なコードを書くだけで、本格的な心理学の調査や実験が作れるようになります。\n\n\n\n誰でもどこでも参加できる！ インターネットにつながっていれば、パソコンでもタブレットでも、どこからでも調査や実験に参加してもらえます。大学に来てもらわなくても、自宅で実施できるので、たくさんの人に協力してもらいやすくなります。\n正確な時間測定ができる！ 反応時間など、ミリ秒単位の正確な時間測定が必要な実験も、jsPsych ならバッチリ対応できます。心理学の実験では、こうした正確さがとても大切なんです。\n複雑な調査・実験も作れる！ 質問の順番をランダムに変えたり、参加者の回答に応じて次に表示する質問を変えたり、画像や音を使った実験も自由自在です。\n\n今日のゴールは、jsPsych を使って簡単な質問票を自分で作り、パソコンで動かしてみることです。一緒に楽しく学んでいきましょう！"
  },
  {
    "objectID": "jsPsych-01.html#開発環境を整えよう",
    "href": "jsPsych-01.html#開発環境を整えよう",
    "title": "jsPsych 演習: 第1回",
    "section": "",
    "text": "jsPsych で調査・実験を作るためには、いくつかの準備が必要です。難しそうに聞こえるかもしれませんが、ひとつずつ一緒にやっていきましょう！\n\n\nVS Code は、プログラミングをするための「高機能なメモ帳」のようなものです。これを使うと、コードがとても書きやすくなります。\n\nダウンロードサイトへアクセス: 以下のVS Codeの公式サイトにアクセスしてください。https://code.visualstudio.com/\nダウンロード: 使っているパソコンのOS（Windows、macOSなど）に合わせて、ダウンロードボタンをクリックします。\nインストール: ダウンロードしたファイルをダブルクリックして、画面の指示に従ってインストールを進めてください。特に難しい設定は必要ありません。「次へ」「同意する」「インストール」などをクリックしていけばOKです。\n\nMacの場合: アプリケーションフォルダにドラッグ&ドロップするだけです。\n\n日本語化 (任意): VS Code を起動して，英語表示になっていたら日本語に切り替えましょう。\n\n左側の四角が並んだアイコン（拡張機能）をクリックします。\n検索窓に「Japanese Language Pack for Visual Studio Code」と入力して検索します。\n表示された拡張機能の「Install」ボタンをクリックします。\nインストール後、VS Code の再起動を求められるので、再起動します。\n\n\n\n\n\n作った調査や実験をウェブブラウザで確認するために、「Live Server」という便利な機能を使います。これは、VS Code の「拡張機能」として追加できます。\n\n拡張機能を開く:: VS Code の左側にある四角が並んだアイコン（拡張機能）をクリックします。\nLive Server を検索:: 検索窓に「Live Server」と入力して検索します。\nインストール:: 表示された「Live Server」の拡張機能の「Install」ボタンをクリックします。これで準備完了です！\n\n\n\n\njsPsych で作ったものは、ウェブブラウザ（Google Chromeなど）で動かします。特に指定がなければ、Google Chrome を使うのがおすすめです。開発者向けの便利な機能がたくさん搭載されています。\nもしGoogle Chromeが入っていない場合は、以下のサイトからダウンロードしてインストールしておきましょう。\nhttps://www.google.com/intl/ja_jp/chrome/\n\n\n\njsPsych のライブラリと必要なプラグインをダウンロードして、VS Code で使えるようにします。\n\njsPsych のダウンロード: 以下のリンクから、jsPsych の最新バージョンをダウンロードします。https://github.com/jspsych/jsPsych/releases/tag/jspsych%407.3.4\nファイルを解凍: ダウンロードした ZIP ファイルを解凍します。解凍すると、jsPsych のフォルダができます。ただし，このままでは使うのに不便なので、必要なファイルだけを取り出します。具体的には，dist フォルダの中にあるファイルのみを使います。dist フォルダの中には、jsPsych の本体やプラグインが含まれていますので，このフォルダを jsPsych フォルダとして保存します。保存先は，VS Code でプログラムを作成するフォルダとします。\n\n\nこれで、jsPsych で調査・実験を作るための基本的な準備は完了です！ 次は、実際にjsPsychの基本的な構造を見て、簡単な質問票を作ってみましょう。"
  },
  {
    "objectID": "jsPsych-01.html#jspsych-の基本構造を理解しよう",
    "href": "jsPsych-01.html#jspsych-の基本構造を理解しよう",
    "title": "jsPsych 演習: 第1回",
    "section": "",
    "text": "jsPsych を使って心理学の調査や実験を作成する際、主に3つの種類のファイルが連携して動作します。それぞれのファイルが異なる役割を持っています。\n\nHTMLファイル (index.html): ウェブページの「骨格」を作るファイルです。jsPsych ライブラリ本体、必要なプラグイン、そして皆さんが書く JavaScript のコードを読み込む役割を担います。\nJavaScriptファイル (script.js): 調査や実験の「流れ」を記述するファイルです。どんな質問をどんな順番で表示するかといった、実験のロジックはすべてここに記述します。可読性を高めるため、このファイルを独立させます。\nCSSファイル (style.css): ページの「見た目」を整えます。文字の大きさや色、要素の配置などをここで定義します。今回は、シンプルな表示を目的としたテンプレートとして提供します。\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;jsPsych 演習&lt;/title&gt;\n    &lt;link href=\"jspsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"jspsych-display\"&gt;&lt;/div&gt;\n\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\nこのファイルに、実験や調査の内容（質問文、選択肢、表示順序等）のロジックを記述します。\n\ninitJsPsych({...}):\n\njsPsych の動作を開始するための初期設定を行います。\non_finish: 実験がすべて完了した後に実行される関数を定義します。例えば、取得した実験データをブラウザの画面に表示したり、CSV形式でダウンロードさせたりする処理をここに記述します。\n\nconst timeline = [];:\n\nこれは、実験で表示する各要素（教示、質問など）を順番に並べるためのリスト（配列）です。このリストに「ブロック」を追加していくことで、実験の流れを定義します。\n\n各 const informed_consent = {...} や const age_question = {...} など:\n\nこれら一つ一つが「ブロック」と呼ばれるものです。type プロパティで、どのプラグイン（特定の機能を持つ部品）を使用するかを指定し、stimulus や questions といったプロパティで、そのブロックの具体的な表示内容や動作を設定します。\n\ntimeline.push(informed_consent);:\n\n作成したブロックを timeline のリストの最後に追加します。この順序が、実験の実行順序になります。\n\njsPsych.run(timeline);:\n\ntimeline に定義されたすべてのブロックを実行し、jsPsych の実験を動かします。\n\n\n// jsPsych のインスタンスを初期化し、実験の全体的な設定を行います。\nconst jsPsych = initJsPsych({\n    // on_finishは、すべての実験トライアルが終了したときに実行される関数です。\n    // ここでは、取得した実験データをブラウザに表示するように設定しています。\n    on_finish: function() {\n        jsPsych.data.displayData(); // 実験データをブラウザ画面に表示します。\n        // データをCSV形式でダウンロードしたい場合は、以下のコメントを解除して使用します。\n        // const csv = jsPsych.data.get().csv();\n        // jsPsych.downloadCSV(csv, 'experiment-data.csv');\n    }\n});\n\n// 実験のタイムラインを定義します。タイムラインは、実行される「ブロック」の順序を決定するリストです。\nconst timeline = [];\n\n// --- 1. インフォームドコンセントブロック ---\nconst informed_consent = {\n    type: jsPsychInstructions, // instructions プラグインを使用\n    pages: [ // 複数のページを作成できます\n        `\n        &lt;h2&gt;調査へのご協力のお願い&lt;/h2&gt;\n        &lt;p&gt;この度は、本調査にご参加いただきありがとうございます。&lt;/p&gt;\n        &lt;p&gt;本調査は、人々の意見や信念に関する研究を目的としています。\n        あなたの回答は、統計的に処理され、個人が特定できる形で公開されることは\n        一切ありません。&lt;/p&gt;\n        &lt;p&gt;調査にかかる時間は約5分です。&lt;/p&gt;\n        &lt;p&gt;ご参加は完全に任意であり、途中でいつでも中断することができます。\n        中断した場合でも、あなたに不利益が生じることはありません。&lt;/p&gt;\n        &lt;p&gt;本調査に関してご不明な点がありましたら、担当者にお尋ねください。&lt;/p&gt;\n        `,\n        `\n        &lt;p&gt;上記の調査内容について理解し、本調査に自らの意思で参加することに\n        同意しますか？&lt;/p&gt;\n        &lt;p&gt;&lt;b&gt;同意する場合は「次へ」ボタンを、同意しない場合はブラウザを閉じて\n        ください。&lt;/b&gt;&lt;/p&gt;\n        `\n    ],\n    button_label_next: '次へ', // 次のページへ進むボタンのラベル\n    button_label_previous: '戻る', // 前のページへ戻るボタンのラベル\n    show_clickable_nav: true // ボタンでページを移動できるようにする\n};\ntimeline.push(informed_consent); // 作成したインフォームドコンセントブロックをタイムラインに追加\n\n// --- 2. 個人属性の質問ブロック ---\n\n// 性別の質問\nconst gender_question = {\n    type: jsPsychSurveyMultiChoice, // 複数選択形式の質問プラグイン\n    questions: [\n        {\n            prompt: 'あなたの性別を選択してください。', // 質問文\n            options: ['男性', '女性', 'その他', '回答したくない'], // 選択肢\n            name: 'gender', // 回答データを識別するための名前\n            required: true // 回答必須にする\n        }\n    ],\n    button_label: '次へ進む', // 次のページへ進むボタンのラベル\n};\ntimeline.push(gender_question);\n\n// 年齢の質問\nconst age_question = {\n    type: jsPsychSurveyText, // テキスト入力形式の質問プラグイン\n    questions: [\n        {\n            prompt: 'あなたの年齢を入力してください。', // 質問文\n            placeholder: '例: 20', // 入力フィールドの例示テキスト\n            name: 'age', // 回答データを識別するための名前\n            required: true // 回答必須にする\n        }\n    ],\n    button_label: '次へ進む',\n};\ntimeline.push(age_question);\n\n// --- 3. 尺度教示ブロック ---\nconst scale_instructions = {\n    type: jsPsychInstructions, // instructions プラグインを使用\n    pages: [\n        `\n        &lt;h2&gt;以下のそれぞれの文章について、あなた自身の意見として、その内容が\n        どの程度正しいと思うかを、以下のスケールに従って示してください。&lt;/h2&gt;\n        &lt;p&gt;この問題に、客観的に見た正解や不正解はありませんので、あなた自身の\n        個人的な意見をお聞かせください。&lt;/p&gt;\n        &lt;p&gt;&lt;b&gt;尺度のスケール: 0% - 100% まで 10% 刻みの11件法リッカート\n        尺度&lt;/b&gt;&lt;/p&gt;\n        `\n    ],\n    button_label_next: '回答を始める', // 次のページへ進むボタンのラベル\n    button_label_previous: '戻る', // 前のページへ戻るボタンのラベル\n    show_clickable_nav: true // ボタンでページを移動できるようにする\n};\ntimeline.push(scale_instructions);\n\n// --- 4. 尺度項目の質問ブロック ---\n\n// 尺度のスケールを定義\nconst scale_options = [\n    '0%', '10%', '20%', '30%', '40%', '50%',\n    '60%', '70%', '80%', '90%', '100%'\n];\n\n// 尺度項目1\nconst item1 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、大衆には決して知らされない、とても重大なことが世界で数多く起きていると思う。',\n            options: scale_options,\n            name: 'conspiracy_item1',\n            required: true\n        }\n    ],\n    randomize_question_order: false, // 質問順序のランダム化は行わない\n    button_label: '次へ',\n};\ntimeline.push(item1);\n\n// 尺度項目2\nconst item2 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、政治家はふつう、自分たちの意思決定の本当の動機を教えてはくれないと思う。',\n            options: scale_options,\n            name: 'conspiracy_item2',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item2);\n\n// 尺度項目3\nconst item3 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、政府当局が、全ての市民を厳重に監視していると思う。',\n            options: scale_options,\n            name: 'conspiracy_item3',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item3);\n\n// 尺度項目4\nconst item4 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、表面的には関連のない出来事が、しばしば秘密の活動の結果であると思う。',\n            options: scale_options,\n            name: 'conspiracy_item4',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item4);\n\n// 尺度項目5\nconst item5 = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: '私は、政治的な決定に強い影響力を与える秘密の組織が存在すると思う。',\n            options: scale_options,\n            name: 'conspiracy_item5',\n            required: true\n        }\n    ],\n    randomize_question_order: false,\n    button_label: '次へ',\n};\ntimeline.push(item5);\n\n// --- 5. 実験終了ブロック ---\nconst end_screen = {\n    type: jsPsychHtmlKeyboardResponse, // 終了画面\n    stimulus: `\n        &lt;p&gt;質問票は以上で終了です。ご協力ありがとうございました。&lt;/p&gt;\n        &lt;p&gt;このウィンドウは閉じていただいて構いません。&lt;/p&gt;\n    `,\n    choices: \"NO_KEYS\", // キー入力では次へ進まない\n    trial_duration: 3000 // 3秒後に自動的に画面が消える（on_finishが実行される）\n};\ntimeline.push(end_screen);\n\n// すべてのブロックが定義されたタイムラインを実行して、実験を開始します。\njsPsych.run(timeline);\n\n\n\n\nこのファイルでは、jsPsych の表示領域を画面の中央に配置し、画面サイズに対して大きくなりすぎないように調整する見た目のスタイルを設定します。今回は、このスタイルシートの詳細な解説は行いませんので、以下のコードをそのままコピー＆ペーストして使用してください。\n\nbody と #jspsych-display のスタイル設定により、コンテンツが画面の中央に配置され、最大でも画面の幅と高さの90%に収まるように調整されます。\noverflow: auto; プロパティによって、もしコンテンツがこの90%の領域を超えてしまった場合でも、自動的にスクロールバーが表示されるため、内容が隠れる心配がありません。\nその他のスタイルは、文字のフォント、色、ボタンのデザインなど、基本的な表示を整えるためのものです。\n\n/* style.css */\n\n/* jsPsychの表示領域全体の設定 */\nbody {\n    display: flex; /* Flexbox を使って要素を配置 */\n    justify-content: center; /* 水平方向の中央揃え */\n    align-items: center; /* 垂直方向の中央揃え */\n    min-height: 100vh; /* 画面全体の高さを使用 */\n    margin: 0; /* body の余白をなくす */\n    background-color: #f0f0f0; /* 背景色を設定 */\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* フォントの指定 */\n    color: #333; /* 文字色 */\n}\n\n/* jsPsychのコンテンツが実際に表示される部分（id=\"jspsych-display\"） */\n#jspsych-display {\n    max-width: 90vw; /* 画面幅の90%が最大幅 */\n    max-height: 90vh; /* 画面高さの90%が最大高さ */\n    width: 100%; /* 親要素の幅に合わせて伸びる */\n    height: 100%; /* 親要素の高さに合わせて伸びる */\n    overflow: auto; /* 内容がはみ出したらスクロールできるようにする */\n    background-color: #fff; /* 背景色 */\n    padding: 20px; /* 内側の余白 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影 */\n    border-radius: 8px; /* 角を丸くする */\n    box-sizing: border-box; /* paddingやborderを幅・高さに含める */\n}\n\n/* jsPsychが自動生成するコンテンツのスタイル調整 */\n.jspsych-content {\n    text-align: center; /* テキストを中央揃え */\n    margin-bottom: 20px; /* 下に余白 */\n}\n\n/* 質問文のスタイル */\n.jspsych-stimulus {\n    font-size: 1.2em; /* フォントサイズを少し大きく */\n    margin-bottom: 25px; /* 下に余白 */\n    line-height: 1.5; /* 行の高さ */\n}\n\n/* 入力フィールドのスタイル */\n.jspsych-survey-text input[type=\"text\"] {\n    width: 80%; /* 幅 */\n    padding: 10px; /* 内側の余白 */\n    margin-top: 10px; /* 上に余白 */\n    font-size: 1em; /* フォントサイズ */\n    border: 1px solid #ccc; /* 枠線 */\n    border-radius: 4px; /* 角を丸くする */\n}\n\n/* ボタンのスタイル */\n.jspsych-btn {\n    background-color: #007bff; /* ボタンの背景色 */\n    color: white; /* 文字色 */\n    padding: 10px 20px; /* 内側の余白 */\n    border: none; /* 枠線をなくす */\n    border-radius: 5px; /* 角を丸くする */\n    cursor: pointer; /* マウスカーソルを指マークに */\n    font-size: 1em; /* フォントサイズ */\n    margin-top: 20px; /* 上に余白 */\n    transition: background-color 0.3s ease; /* ホバー時のアニメーション */\n}\n\n.jspsych-btn:hover {\n    background-color: #0056b3; /* ホバー時の背景色 */\n}\n\n/* その他、必要に応じて追加 */\n.jspsych-instructions {\n    text-align: center;\n    font-size: 1.1em;\n    line-height: 1.6;\n}\n\n\n\n\n\n\n\n実際にこれらのファイルを使ってjsPsychの実験を動かすために、以下の手順でファイルを準備してください。\n\nまず、ご自身のPCの好きな場所に新しいフォルダを作成してください。フォルダ名は、例えば jspsych_my_project など、分かりやすい名前にしましょう。\n作成したフォルダの中に、index.html、script.js、style.css という名前の新しいファイルを作成します。これらのファイルには、既に以前お伝えしたそれぞれのコードをコピー＆ペーストして保存してください。\njsPsych のライブラリファイルをダウンロードし、プロジェクトフォルダ内に配置します。\n\njsPsych の公式サイト（https://www.jspsych.org/download/）から最新版の jsPsych をダウンロードしてください。\nダウンロードした jspsych-X.X.X.zip (X.X.Xはバージョン番号) という圧縮ファイルを解凍します。\n解凍してできたフォルダの中に、jspsych.js や plugin-html-keyboard-response.js などのファイルが格納されている jspsych という名前のフォルダがあるはずです。このjspsychフォルダ全体を、先ほど作成したプロジェクトフォルダ（例: jspsych_my_project）の中にそのままコピーしてください。\n\n最終的なフォルダ構造は以下のようになります。\njspsych_my_project/\n    ├── index.html       &lt;- 皆さんが作成したHTMLファイル\n    ├── script.js        &lt;- 皆さんが作成したJavaScriptファイル\n    ├── style.css        &lt;- 皆さんが作成したCSSファイル\n    └── jspsych/         &lt;- ダウンロードしたjsPsychライブラリのフォルダ\n        ├── jspsych.js\n        ├── plugin-html-keyboard-response.js\n        ├── plugin-survey-text.js\n        ├── css/\n        │   └── jspsych.css\n        └── ... (その他のプラグインやファイル)\n\nこれで、jsPsych で簡単な質問票を作成・実行するための基本的な環境が整いました。 準備はできましたか？"
  },
  {
    "objectID": "jsPsych-01.html#jspsych-を使って心理尺度の質問票を作ってみよう",
    "href": "jsPsych-01.html#jspsych-を使って心理尺度の質問票を作ってみよう",
    "title": "jsPsych 演習: 第1回",
    "section": "",
    "text": "これまでの学習を踏まえて，jsPsych を使って心理尺度の質問票を作成してみましょう。作成するのは，心理学ではとても有名な自尊感情尺度です。\n\n\n自尊感情尺度（Rosenberg Self-Esteem Scale, RSES）は、 自分自身に対する評価や感情を測定するための心理尺度です。 この尺度は、個人の自尊感情を評価するために広く使用されており、 以下のような質問が含まれています。\n\n教示文: 以下には，自分自身に対する一般的な感情について書かれた文章が表示されます。それぞれの文章にどの程度同意できるかを答えてください。1 = 強くそう思わない, 2 = そう思わない, 3 = そう思う, 4 = 強くそう思う\n項目\n\n私は，自分自身にだいたい満足している。\n時々，自分はまったくダメだと思うことがある。\n私にはけっこう長所があると感じている。\n私は，他の大半の人と同じくらいに物事がこなせる。\n私には誇れるものが大してないと感じる。\n時々，自分は役に立たないと強く感じることがある。\n自分は少なくとも他の人と同じくらい価値のある人間だ，と感じている。\n私は，自分のことを前向きに考えている。\nよく，私は落ちこぼれだと思ってしまう。\n自分のことをもうすこし尊敬できたらいいと思う。\n\n\nこの自尊感情尺度を含み，個人属性情報として，年齢，性別に加えて，最終学歴を尋ねる質問票を作成してみましょう。 なお，先ほど作成したサンプルプログラムとは，別のフォルダにするか，あるいはファイル名を変更して，別の名前で保存してください。"
  },
  {
    "objectID": "jsPsych-02.html",
    "href": "jsPsych-02.html",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "第1回では、皆さんの作業フォルダの直下に index.html や script.js、style.css、そして jspsych ライブラリのすべてを配置しました。しかし、実際の開発では、プロジェクトごとにファイルを整理することが一般的です。\n第2回では、より実践的なファイル管理を学ぶために、新しいプロジェクトフォルダを作成し、その中に今回の演習用の index.html と script.js, style.css を配置します。\n既存の jspsych ライブラリ（jspsychフォルダ）は、引き続き今回の新しいプロジェクトフォルダの「上の階層」（つまり、作業フォルダの直下）に配置されているものとします。\n\n\nまず、第1回で使ったファイル群がある場所とは別に、新たに第2回用のフォルダを作成しましょう。\n手順:\n\nPCの好きな場所（例: デスクトップやドキュメントフォルダ）で、第1回のファイルが置いてある場所と同じ階層に、新しくフォルダを作成してください。\nフォルダの名前は、例えば jspsych_exercise_2 のように、第2回用であることがわかる名前にしましょう。\n\nあなたの作業フォルダ/  (第1回のファイル群がここにある)\n    ├── index.html       (第1回で作成)\n    ├── script.js        (第1回で作成)\n    ├── style.css        (第1回で作成・共通利用)\n    ├── jspsych/         (第1回で配置・共通利用)\n    │   ├── jspsych.js\n    │   └── ...\n    └── jspsych_exercise_2/  (今回作成するフォルダ)\n\n\n\n\n\n\nファイルパスとは、ファイルやフォルダがコンピュータのどこにあるかを示す「住所」のようなものです。\n\n絶対パス: コンピュータのルート（一番上の階層）から目的のファイルまでの完全な住所を示す方法です。（例: C:\\Users\\YourName\\Documents\\project\\index.html）\n相対パス: 現在いる場所（現在のファイルがある場所）を基準にして、目的のファイルまでの道筋を示す方法です。\n\n今回の演習では、jspsych_exercise_2 フォルダの中に置く index.html から、その「上の階層」にある jspsych フォルダの中のライブラリを参照する必要があります。このときに「相対パス」を使います。\n\n\n\n相対パスで一つ上の階層のフォルダやファイルを参照するには、../ (ドット2つとスラッシュ) を使います。\n例えば、jspsych_exercise_2/index.html から jspsych.js を参照する場合、jspsych.js は jspsych_exercise_2 の一つ上の階層にある jspsych フォルダの中にあるので jspsych.js を参照するには ../jspsych/jspsych.js と記述します。\n\n\n\n今回のフォルダ構成のイメージ:\nあなたの作業フォルダ/  (現在の場所)\n    ├── jspsych/          &lt;-- ここに jspsych ライブラリのフォルダがある\n    │   ├── jspsych.js\n    │   ├── plugin-instructions.js\n    │   └── ...\n    ├── index.html        (第1回用)\n    ├── script.js         (第1回用)\n    ├── style.css         (第1回用)\n    └── jspsych_exercise_2/  &lt;-- 今回の新しい作業フォルダ\n        ├── index.html       &lt;-- このファイルから上の階層を参照する\n        ├── script.js        &lt;-- このファイルは新しいもの\n        └── style.css        &lt;-- このファイルは新しいもの\n\n\n\nそれでは、jspsych_exercise_2 フォルダの中に、新しい index.html ファイルを作成し、必要なライブラリへのパスを修正しましょう。\n手順:\n\nVS Code で、jspsych_exercise_2 フォルダを開きます。\nその中に index.html という名前で新しいファイルを作成します。\n以下のHTMLコードをコピー＆ペーストしてください。特に、href や src のパスが ../ で始まっている点に注目してください。\n\nindex.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;jsPsych 演習2&lt;/title&gt;\n    &lt;link href=\"../jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;link href=\"../jspsych/survey.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"jspsych-display\"&gt;\n    &lt;script src=\"../jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey-likert.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n../jspsych/jspsych.css: index.html のある場所（jspsych_exercise_2）から見て、一つ上の階層にある jspsych フォルダの中の jspsych.css を参照しています。jspsyc.js やそのプラグインも同様です。\n../jspsych/survey.css: こちらも jspsych フォルダの中にあるスタイルファイルですが，後述の surveyJS のためのスタイルを定義したファイルです。もし，survey.css がフォルダ中にない場合は，jsPsych.zip を再度入手して展開し直してください。… https://github.com/jspsych/jsPsych/releases/download/%40jspsych%2Fplugin-survey%402.1.0/jspsych.zip\nstyle.css, script.js: これは index.html と同じ jspsych_exercise_2 フォルダ内に置くので、../ は不要です。\n\n\n\n\n\n\n\n新しい index.html を作成したので、それに合わせて、最低限の動作をする script.js を作成してみましょう。この script.js は、jsPsychを初期化し、空のタイムラインを実行するだけのシンプルなものです。\n手順:\n\nVS Code で、jspsych_exercise_2 フォルダの中に script.js という名前で新しいファイルを作成します。\n以下のJavaScriptコードをコピー＆ペーストしてください。\n\nscript.js\n// jsPsych のインスタンスを初期化し、実験の全体的な設定を行います。\n// ここで jsPsych の基本的な動作を設定します。\nconst jsPsych = initJsPsych({\n    // on_finishは、すべての実験トライアルが終了したときに実行される関数です。\n    // 今回は、実験が完了したときにデータをブラウザに表示するように設定しています。\n    on_finish: function() {\n        jsPsych.data.displayData(); // 実験データをブラウザ画面に表示します。\n        // 後ほど、ここでデータをCSVとしてダウンロードする設定も行います。\n    }\n});\n\n// 実験のタイムラインを定義します。\n// タイムラインは、実行される「ブロック」（質問や指示など）の順序を決定するリストです。\nconst timeline = [];\n\n// 現時点ではタイムラインは空なので、何も表示されません。\n\n// すべてのブロックが定義されたタイムラインを実行して、実験を開始します。\njsPsych.run(timeline);\n\nconst jsPsych = initJsPsych({...}):\n\nこれは、jsPsych を使用するための準備（初期化）を行う最も基本的なコードです。initJsPsych 関数を呼び出すことで、jsPsych の「インスタンス」と呼ばれるものが作成され、jsPsych という変数に格納されます。\non_finish: この設定は、実験がすべて終了したときに自動的に実行される部分です。ここでは jsPsych.data.displayData(); が指定されており、実験完了後に収集されたデータがブラウザ画面に表示されます。\njsPsych の名前は任意です。例えば，const myExperiment = iniJsPsych(); とすると，jsPsych のインスタンスは，myExperiment という変数に格納されます。この場合，on_finish: にある function() 以下は，function() {    myExperiment.data.displayData();} と書きます。\n\nconst timeline = [];:\n\nこれは、実験を構成する個々の「ブロック」（例えば、教示、質問、休憩など）を順序立てて格納するための、空のリスト（JavaScriptでは「配列」と呼びます）です。後ほど、この timeline 配列にブロックを追加していくことで、実験の流れを構築します。\n\njsPsych.run(timeline);:\n\nこのコードが実行されることで、配列 timeline に定義されたブロックが上から順に実行され、jsPsychの実験が開始されます。\n\n\n続いて，同様に style.css を作成します。\n手順:\n\nVS Code で、jspsych_exercise_2 フォルダの中に style.css という名前で新しいファイルを作成します。\n以下の CSS コードをコピー＆ペーストしてください。\n\n\n\n\nstyle.css\n/* style.css */\n\n/* jsPsychの表示領域全体の設定 */\nbody {\n    display: flex; /* Flexbox を使って要素を配置 */\n    justify-content: center; /* 水平方向の中央揃え */\n    align-items: center; /* 垂直方向の中央揃え */\n    min-height: 100vh; /* 画面全体の高さを使用 */\n    margin: 0; /* body の余白をなくす */\n    background-color: #f0f0f0; /* 背景色を設定 */\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* フォントの指定 */\n    color: #333; /* 文字色 */\n}\n\n/* jsPsychが自動生成するコンテンツのスタイル調整 */\n.jspsych-content {\n    text-align: center; /* テキストを中央揃え */\n    margin-bottom: 20px; /* 下に余白 */\n    max-width: 90vw; /* 画面幅の90%が最大幅 */\n    max-height: 90vh; /* 画面高さの90%が最大高さ */\n    width: 100%; /* 親要素の幅に合わせて伸びる */\n    height: 100%; /* 親要素の高さに合わせて伸びる */\n    overflow: auto; /* 内容がはみ出したらスクロールできるようにする */\n    background-color: #fff; /* 背景色 */\n    padding: 20px; /* 内側の余白 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影 */\n    border-radius: 8px; /* 角を丸くする */\n    box-sizing: border-box; /* paddingやborderを幅・高さに含める */\n}\n\n/* 質問文のスタイル */\n.jspsych-stimulus {\n    font-size: 1.2em; /* フォントサイズを少し大きく */\n    margin-bottom: 25px; /* 下に余白 */\n    line-height: 1.5; /* 行の高さ */\n}\n\n/* 入力フィールドのスタイル */\n.jspsych-survey-text input[type=\"text\"] {\n    width: 80%; /* 幅 */\n    padding: 10px; /* 内側の余白 */\n    margin-top: 10px; /* 上に余白 */\n    font-size: 1em; /* フォントサイズ */\n    border: 1px solid #ccc; /* 枠線 */\n    border-radius: 4px; /* 角を丸くする */\n}\n\n/* ボタンのスタイル */\n.jspsych-btn {\n    background-color: #007bff; /* ボタンの背景色 */\n    color: white; /* 文字色 */\n    padding: 10px 20px; /* 内側の余白 */\n    border: none; /* 枠線をなくす */\n    border-radius: 5px; /* 角を丸くする */\n    cursor: pointer; /* マウスカーソルを指マークに */\n    font-size: 1em; /* フォントサイズ */\n    margin-top: 20px; /* 上に余白 */\n    transition: background-color 0.3s ease; /* ホバー時のアニメーション */\n}\n\n.jspsych-btn:hover {\n    background-color: #0056b3; /* ホバー時の背景色 */\n}\n\n\n\njsPsychを使ったウェブページが期待通りに動かない時、その原因を探るための最も強力なツールの一つが、ブラウザの「開発者ツール (Developer Tools)」です。特に、その中の「コンソール (Console)」と呼ばれる部分には、JavaScriptのエラーメッセージやプログラムからの出力が表示され、問題解決の大きなヒントになります。\nこの資料では、皆さんがよく使う「Google Chrome」と「Microsoft Edge」の2つのブラウザで、JavaScriptコンソールを表示する方法を説明します。\n\n\n\nGoogle Chrome でjsPsychのページを開いている状態で、以下のいずれかの方法で開発者ツールを開き、コンソールを表示できます。\n\n\n\njsPsychのページがChromeで表示されている状態で、キーボードの F12 キー を押します。\n\n(ノートPCによっては Fn キーと同時に F12 を押す必要がある場合があります。)\n\nまたは、Ctrl + Shift + J (Windows) または Cmd + Option + J (Mac) を押します。\n\n\n\n\n\n画面右上のメニューアイコン (…) を開く。\n表示されるメニューの中から「その他のツール」→「デベロッパーツール」を選択します。\n\n\n\n\n\n開発者ツールが画面の片側（通常は右側か下側）に表示されます。\n上部または下部に並んでいるタブの中から「Console (コンソール)」タブを探してクリックします。\n\n\n\n\n\nMicrosoft Edge でも、Google Chrome とほぼ同じ方法で開発者ツールを開き、コンソールを表示できます。\n\n\n\njsPsychのページがEdgeで表示されている状態で、キーボードの F12 キー を押します。\n\n(ノートPCによっては Fn キーと同時に F12 を押す必要がある場合があります。)\n\nまたは、Ctrl + Shift + J (Windows) を押します。\n\n\n\n\n\n画面右上のメニューアイコン (…) を開く。\n表示されるメニューの中から「その他のツール」→「開発者ツール」を選択します。\n\n\n\n\n\n開発者ツールが画面の片側（通常は右側か下側）に表示されます。\n上部または下部に並んでいるタブの中から「Console (コンソール)」タブを探してクリックします。\n\n\n\n\n\nコンソールに赤色の文字でメッセージが表示されている場合、それはJavaScriptのコードに何らかの問題があることを示しています。\n\n例えば、「Uncaught ReferenceError: jsPsychInstructions is not defined」のようなエラーは、「jsPsychInstructions というものが定義されていません」という意味です。これは、対応するプラグインファイル（plugin-instructions.js）が正しく読み込まれていない、または読み込み忘れている可能性を示唆します。\nエラーメッセージは英語ですが、重要なキーワード（not defined、cannot read property of undefined、Failed to load resourceなど）を把握し、どの行でエラーが起きているか（ファイル名と行番号）を確認することが、問題解決の第一歩です。\n\nエラーメッセージを見ることで、より早く原因を特定し、解決に導くことができます。\n\n\n\n\n\n\n\n\n\n第1回でjsPsychの基本的な使い方と環境設定、そして第2回演習のためのプロジェクト準備（新しいフォルダ作成と相対パスの設定）が完了しましたね。ここからは、jsPsychのより高度な機能と、実験データの取得・確認方法について深掘りしていきます。\n\n\n\n\n多様なjsPsychプラグインの特性を理解し、適切に使い分けられるようになる。\n特に、jsPsychSurveyLikert と jsPsychSurvey (Rating質問) の違いと使い分けを理解する。\nタイムラインの階層構造を理解し、複雑な実験フローを設計できるようになる。\n試行の順序をランダム化し、実験デザインの妥当性を高める方法を学ぶ。\nJavaScriptの関数を使って、コードを効率的に「ブロック化」する手法を習得する。\n収集した実験データを正しく確認・ダウンロードし、分析への準備ができるようになる。\n\nこれらのスキルを習得することで、より多様で洗練された心理学の調査や実験を、jsPsychを使って構築できるようになります。\n\n\n\n\njsPsychが持つ機能は、それぞれの目的に特化した「プラグイン」として提供されています。これにより、様々な種類の実験や調査を柔軟に作成できます。プラグインは、jsPsych本体とは別のJavaScriptファイルとして提供されており、index.htmlで読み込むことで利用可能になります。\n\n\n第1回でも使用した主要なプラグインを、簡単な復習を兼ねて確認しましょう。\n\n\n\n用途: 複数のページにわたる教示文や説明文を表示するために使います。参加者はボタンをクリックしてページを移動します。インフォームドコンセントフォームなど、長いテキスト情報を段階的に見せたい場合に非常に便利です。\n特徴: 長い説明や同意書を表示するのに適しており、前のページに戻ることもできます。\n主なオプション:\n\npages: 表示するHTML文字列の配列。`` や ’’, “” で囲まれた，各配列要素が1ページ分になります。\nbutton_label_next: 次のページへ進むボタンに表示するテキスト。\nbutton_label_previous: 前のページへ戻るボタンに表示するテキスト。\nshow_clickable_nav: ナビゲーションボタン（次へ/戻る）を表示するかどうかをtrueかfalseで指定します。\n\n演習1-1: 練習用の指示ページを作成する\n\nscript.jsを開き、既存のタイムライン（timeline）に新しいブロックを追加してみましょう。\njsPsychInstructionsプラグインを使い、2～3ページ程度の短い指示（例：「準備は良いですか？」「次のページで質問が始まります」など）を作成してみましょう。\nLive Serverで実行し、ボタンをクリックしてページが移動できるか確認してください。\n\n// 演習1-1の例\nconst practice_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;p&gt;この演習セクションでは、簡単な練習問題を行います。&lt;/p&gt;&lt;p&gt;次へ進んでください。&lt;/p&gt;`,\n        `&lt;p&gt;準備ができたら「スタート」ボタンをクリックしてください。&lt;/p&gt;`\n    ],\n    button_label_next: '次へ',\n    button_label_previous: '戻る',\n    show_clickable_nav: true\n};\ntimeline.push(practice_instructions); // タイムラインに追加\n\n\n\n\n\n用途: シンプルなHTMLコンテンツを表示し、特定のキー入力を待つために使います。\n特徴: 実験の開始合図、休憩、短い指示など、参加者にキー操作を求める場面で使われ，反応時間の計測にも利用されます。\n主なオプション:\n\nstimulus: 表示するHTML文字列。\nchoices: 待機するキーの配列。例えば [' '] でスペースキーの入力を待ちます。\"NO_KEYS\"とすると、キー入力を待たずに次のブロックへ自動的に進みます。\ntrial_duration: 刺激を提示する時間（ミリ秒単位）。この時間内にキー入力がなければ次のブロックへ自動的に進みます。指定しない場合はキー入力があるまで続きます。choices: \"NO_KEYS\" と組み合わせると，一定時間経過後に自動的に次のページへ移る（知覚実験で注視点を表示するなど）という機能を実装できます。\n\n演習1-2: キー入力で進む教示を作成する\n\nscript.jsで、jsPsychHtmlKeyboardResponseを使って「スペースキーを押して開始」という指示を作成してみましょう。\nstimulusにはわかりやすい文章を、choicesには[' ']を設定してください。\nこのブロックをタイムラインに追加し、Live Serverで実行して、スペースキーで次へ進めることを確認してください。\n\n// 演習1-2の例\nconst start_trial_prompt = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p&gt;準備ができたら、&lt;strong&gt;スペースキー&lt;/strong&gt;を押して次の質問に進んでください。&lt;/p&gt;`,\n    choices: [' '], // スペースキーの入力を待つ\n};\ntimeline.push(start_trial_prompt); // 必要に応じてタイムラインに追加\n\n\n\n\n\n用途: 参加者からの自由記述形式のテキスト入力を求める質問に使います。\n特徴: 名前、年齢、学年、簡単な意見など、短いテキスト情報を収集するのに適しています。\n主なオプション:\n\nquestions: 質問オブジェクトの配列。\n\nprompt: 参加者に表示する質問文。\nplaceholder: 入力欄に薄く表示されるヒントテキスト（例示）。\nname: 回答データとして保存される際の項目名（キー）です。データ分析時にこの名前で回答を特定します。\nrequired: 回答を必須にする場合はtrue，しない場合は false を設定します。\n\nbutton_label: 次へ進むボタンに表示するテキスト。\n\n演習1-3: 自由記述質問を追加する\n\n第1回で年齢の質問に使ったのがこのプラグインです。改めて、例えば「今日の気分を一言で教えてください」のような質問を追加してみましょう。\nprompt、placeholder、nameを適切に設定してください。\nrequired: trueにして、入力しないと次へ進めないことを確認してみましょう。\n\n\n\n\n\n\n用途: 提示された複数の選択肢の中から、参加者に一つ（または複数）を選ばせる質問に使います。\n特徴: リッカート尺度や、性別、はい/いいえ、特定のカテゴリ選択など、固定された選択肢からの回答を得たい場合に非常に便利です。\n主なオプション:\n\nquestions: 質問オブジェクトの配列。\n\nprompt: 質問文。\noptions: 選択肢の文字列配列。\nname: 回答データを識別するためのキー。\nrequired: 回答を必須にするか (true または false)。\n\nrandomize_question_order: questions 内の質問順序をランダムにするかどうか（trueでランダム）。\nbutton_label: 次へ進むボタンのラベル。\n\n演習1-4: 複数選択質問を追加する\n\n第1回で性別の質問と陰謀論信念尺度に使ったのがこのプラグインです。\n例えば、「好きな季節を一つ選んでください」といった質問を作成してみましょう。\n選択肢を3～4つ程度用意し、optionsに配列として設定してください。\n\n\n\n\n\n\nここからが第2回のメインテーマの一つです。同じような目的（例：評価尺度）を持つプラグインでも、その機能や表現方法は異なります。具体的な比較を通して、プラグインの選定眼を養いましょう。\n\n\n\n用途: 複数のリッカート尺度項目をまとめて、一度に表示し回答させるために特化されたプラグインです。\n特徴: 質問と尺度の選択肢が一覧で表示されるため、連続した尺度項目への回答が直感的でスムーズです。SurveyMultiChoice で一つずつ表示するよりも、連続した尺度項目に適しており、視覚的に整えやすいというメリットがあります。\n主なオプション:\n\nquestions: 質問文の配列。各要素が1つのリッカート尺度項目になります。\nlabels: 尺度の各選択肢のラベル（例: ['全くそう思わない', 'そう思わない', ..., '強くそう思う']）。\nrequired: 各質問の回答を必須にするか。\nrandomize_question_order: questions配列内の質問の表示順をランダムにするか。\n\n演習1-5: 感情評価尺度を jsPsychSurveyLikert で作成する\n\nまず、index.htmlにplugin-survey-likert.jsを読み込む記述が追加されていることを確認してください（先ほど修正済みです）。\nscript.jsに以下の感情評価尺度（例）をjsPsychSurveyLikert　を使って追加してみましょう。尺度のラベルは、['全く当てはまらない', 'あまり当てはまらない', 'どちらでもない', 'やや当てはまる', '非常に当てはまる']とします。\n尺度のラベルは共通なので，jsPsychSurveyLikertプラグインより前に，事前に配列を作っておきます。\n\n// 演習1-5の例：jsPsychSurveyLikertを使った感情評価尺度\nconst emotion_likert_label = [\n        '全く当てはまらない',\n        'あまり当てはまらない',\n        'どちらでもない',\n        'やや当てはまる',\n        '非常に当てはまる'\n];\nconst emotion_likert_scale = {\n    type: jsPsychSurveyLikert,\n    questions: [\n        { prompt: 'Q1. 私は現在、リラックスしている。', name: 'relax_q_likert', labels: emotion_likert_label },\n        { prompt: 'Q2. 私は現在、不安を感じている。', name: 'anxiety_q_likert', labels: emotion_likert_label },\n        { prompt: 'Q3. 私は現在、幸福を感じている。', name: 'happiness_q_likert', labels: emotion_likert_label }\n    ],\n    required: true,\n    randomize_question_order: false, // 今回は順序固定\n    button_label: '次へ'\n};\ntimeline.push(emotion_likert_scale); // タイムラインに追加\n\nLive Serverで実行し、質問と選択肢がどのように表示されるか、一度に全ての項目が表示されるかを確認してください。\n\n\n\n\n\n\n用途: JavaScriptで動く高機能なアンケート作成ツールであるSurveyJSライブラリを、jsPsych内で利用するためのラッパープラグインです。SurveyJSは非常に多機能で、複雑なアンケート設計が可能です。\n特徴:\n\n質問タイプの多様性: テキスト、複数選択、単一選択、リッカート、評価尺度 (Rating)、ランキング、ファイルアップロード、ブール（Yes/No）など、非常に多くの質問形式に対応しています。\n複雑なレイアウトとロジック: 条件分岐、ページ分け、質問グループ化など、高度なアンケート設計が可能です。\n定義方法: 他のプラグインと異なり、survey_jsonオプションにSurveyJS独自のJSON形式で質問を定義します。\n\njsPsychSurveyLikert と jsPsychSurvey (Rating質問) の比較:\n\njsPsychSurveyLikert は、標準的なリッカート尺度をシンプルに実装するのに最適化されており、コードが直感的で記述しやすいです。\njsPsychSurvey の Rating質問 は、より柔軟な評価尺度（例えば、星評価、感情アイコンの選択など）を表現できます。SurveyJS の豊富なカスタマイズオプションを利用できるため、特定のUIや詳細な評価ニーズがある場合に強力です。コードはJSON形式になるため、学習コストはやや高くなりますが、その分、非常に柔軟な表現が可能です。\n\n演習1-6: 感情評価尺度を jsPsychSurvey (Rating) で作成する\n\n重要: まず、index.htmlにplugin-survey.jsを読み込む記述が追加されていることを確認してください（先ほど修正済みです）。\n次に、script.jsに以下の「感情評価尺度」（演習1-5と同じ内容）をjsPsychSurveyプラグインのRating質問タイプを使って追加してみましょう。\n\n// 演習1-6の例：jsPsychSurveyを使った感情評価尺度（Rating質問タイプ）\nconst emotion_survey_rating_scale = {\n    type: jsPsychSurvey,\n    survey_json: {\n        title: \"現在の感情を評価してください\",\n        completeText: '次へ',\n        elements: [\n            {\n                type: \"rating\", // Rating質問タイプを指定\n                name: \"relax_q_surveyjs\",\n                title: \"Q1. 私は現在、リラックスしている。\",\n                minRateDescription: \"全く当てはまらない\",\n                maxRateDescription: \"非常に当てはまる\",\n                rateCount: 5, // 5段階評価\n                rateValues: [1, 2, 3, 4, 5] // 内部的な値 (1から5)\n            },\n            {\n                type: \"rating\",\n                name: \"anxiety_q_surveyjs\",\n                title: \"Q2. 私は現在、不安を感じている。\",\n                minRateDescription: \"全く当てはまらない\",\n                maxRateDescription: \"非常に当てはまる\",\n                rateCount: 5,\n                rateValues: [1, 2, 3, 4, 5]\n            },\n            {\n                type: \"rating\",\n                name: \"happiness_q_surveyjs\",\n                title: \"Q3. 私は現在、幸福を感じている。\",\n                minRateDescription: \"全く当てはまらない\",\n                maxRateDescription: \"非常に当てはまる\",\n                rateCount: 5,\n                rateValues: [1, 2, 3, 4, 5]\n            }\n        ],\n    },\n};\ntimeline.push(emotion_survey_rating_scale); // タイムラインに追加\n\nLive Serverで実行し、jsPsychSurveyLikertとjsPsychSurvey (Rating) の表示形式の違いを確認してください。特に、それぞれの見た目、操作感、そしてデータとして取得される形式（on_finishで表示されるデータ）の違いに注目しましょう。\nなお，jsPsychSurvey は，ボタンのテキストは，jsPsychSurveyLikert と異なり，button_label ではなく，completeText となり，指定場所も survey_json オプションの中で記述します。\n\n\n\n\n\n\njsPsychImageKeyboardResponse (plugin-image-keyboard-response.js):\n\n用途: 画像を画面に提示し、参加者が特定のキーを入力するのを待つ実験で使います。\n特徴: 視覚刺激に対する反応時間測定（例：顔画像を見たときの反応時間）によく使われます。\n\njsPsychAudioButtonResponse (plugin-audio-button-response.js):\n\n用途: 音声を再生し、参加者がボタンをクリックするのを待つ実験で使います。\n特徴: 聴覚刺激に対する反応（例：特定の音が聞こえたらボタンを押す）を測定するのに適しています。\n\n\n\n\n\n\n\n\n実験や調査は、常に単純な一直線の流れではありません。特定のブロックを繰り返したり、質問の順番をランダムにしたり、条件によって表示を変えたりすることがよくあります。jsPsychはこれらの複雑なフローをtimelineの機能で柔軟に実現できます。\n\n\njsPsychのtimelineは、ブロックの中にさらに別のタイムラインを定義することで、複雑な構造を持つことができます。これを「ネスト（入れ子）」と呼びます。\n例えば、複数の質問をまとめた「質問セクション」を繰り返し表示したい場合や、練習試行と本試行を分けたい場合などに便利です。timelineプロパティを持つオブジェクト（つまり、単一のブロックではなく、複数のブロックをまとめるためのコンテナ）を作成し、その中にさらにブロックや別のタイムラインを配置します。\n// 例：ネストされたタイムラインの基本構造\n// このブロックセットは、2つの質問（質問Aと質問B）から構成されます\nconst question_block_set = {\n    timeline: [ // このtimelineプロパティの中に、一連のブロックを定義します\n        {\n            type: jsPsychSurveyText,\n            questions: [{ prompt: '質問A: 今日は何をしましたか？', name: 'qA' }]\n        },\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [{ prompt: '質問B: 朝食は食べましたか？', options: ['はい', 'いいえ'], name: 'qB' }]\n        }\n    ]\n};\n\n// 全体のタイムライン\nconst full_timeline = [];\nfull_timeline.push(question_block_set); // 作成した質問セットを全体のタイムラインに追加\nfull_timeline.push(question_block_set); // 同じ質問セットをもう一度追加\n\n// この場合、実験は「質問A → 質問B → 質問A → 質問B」という順序で進みます。\n// 同じブロック定義を再利用できることがポイントです。\n// なお実行の際は，full_timeline を run する必要があります。\n// jsPsych.run(full_timeline)\n\ntimeline プロパティを持つオブジェクト自体も、timeline 配列に追加できる一つの「ブロック」として扱われます。これにより、実験の構造をモジュール化し、管理しやすくなります。\n演習2-1: 質問グループをネスト化する\n\n新しい script.js に、第1回で作成した性別と年齢の質問（および国籍の質問）をまとめて、一つのネストされたタイムラインとして定義してみましょう。\nネストされたタイムラインを personal_info_block のような名前の変数に入れ、timeline.push(personal_info_block); として全体のタイムラインに追加してみてください。\nLive Serverで実行し、動作に変化がないことを確認します（見た目は変わりませんが、内部構造は整理されています）。\n\n\n// 演習2-1の例\nconst personal_info_block = {\n    timeline: [\n        // 性別の質問 (以前のコードから移動)\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [\n                { \n                    prompt: 'あなたの性別を選択してください。', \n                    options: ['男性', '女性', 'その他', '回答したくない'], \n                    name: 'gender', required: true \n                }\n            ],\n            button_label: '次へ進む',\n        },\n        // 年齢の質問 (以前のコードから移動)\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                { \n                    prompt: 'あなたの年齢を入力してください。', \n                    placeholder: '例: 20', \n                    name: 'age', required: true \n                }\n            ],\n            button_label: '次へ進む',\n        },\n        // 国籍の質問 (以前のコードから移動)\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [\n                { \n                    prompt: 'あなたの国籍を選択してください。', \n                    options: ['日本', 'その他の国'], \n                    name: 'nationality', \n                    required: true \n                }],\n            button_label: '次へ進む',\n        }\n    ]\n};\ntimeline.push(personal_info_block); // タイムラインに追加\n\n\n\n心理学の実験では、刺激や質問の提示順序が結果に影響を与える「順序効果」を避けるために、その順序をランダムにすることがよくあります。jsPsychはこれを簡単に行うことができます。\n\nrandomize_order: true オプションと timeline_variables:\n\njsPsychで同じタイプのブロックを、異なる内容で複数回（かつランダムに）実行したい場合に非常に強力な機能が「タイムライン変数（timeline_variables）」です。\ntimeline プロパティを持つオブジェクトに timeline_variables プロパティを追加し、そこに実行したい各試行のデータを配列として定義します。\nそして、timeline プロパティ内のブロック定義で jsPsych.timelineVariable('変数名') を使うことで、timeline_variables から対応する値を取得して表示内容を動的に変更します。\nこの timeline_variables に randomize_order: true オプションを追加することで、timeline_variables の配列の順序がランダムになり、結果として、それぞれの質問項目がランダムな順序で表示されることになります。これは、多項目の尺度をランダム化する際の推奨される設計パターンです。\n\n\n\n\n\n// 例：timeline_variables を使って質問の順番をランダムにする\nconst scale_options_for_multi_choice = [ // このスケールは共有されるので外に定義\n    '0%', '10%', '20%', '30%', '40%', '50%',\n    '60%', '70%', '80%', '90%', '100%'\n];\n\nconst randomized_conspiracy_questions_set = {\n    timeline: [ // ここには、テンプレートとなる単一のブロック定義が入る\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [\n                {\n                    prompt: jsPsych.timelineVariable('prompt_text'), // timeline_variablesから動的にプロンプトを取得\n                    options: scale_options_for_multi_choice, // 定義済みのスケールオプションを使用\n                    name: jsPsych.timelineVariable('item_name'), // timeline_variablesから動的に名前を取得\n                    required: true\n                }\n            ],\n            button_label: '次へ'\n        },\n    ],\n    timeline_variables: [ // ここに、各試行でテンプレートに渡したいデータを定義\n        { \n            prompt_text: '私は、大衆には決して知らされない、とても重大なことが世界で数多く起きていると思う。', \n            item_name: 'conspiracy_item1' \n        },\n        { \n            prompt_text: '私は、政治家はふつう、自分たちの意思決定の本当の動機を教えてはくれないと思う。', \n            item_name: 'conspiracy_item2' \n        },\n        { \n            prompt_text: '私は、政府当局が、全ての市民を厳重に監視していると思う。', \n            item_name: 'conspiracy_item3' \n        },\n        { \n            prompt_text: '私は、表面的には関連のない出来事が、しばしば秘密の活動の結果であると思う。', \n            item_name: 'conspiracy_item4' \n        },\n        { \n            prompt_text: '私は、政治的な決定に強い影響力を与える秘密の組織が存在すると思う。', \n            item_name: 'conspiracy_item5' \n        }\n    ],\n    randomize_order: true // このオプションにより、timeline_variablesの順序がランダムになる\n};\ntimeline.push(randomized_conspiracy_questions_set); // タイムラインに追加\n\n注意点: randomize_order: true を設定する際は、それが timeline の直下の子要素のシャッフルを意図しているのか、それとも timeline_variables 内の試行のシャッフルを意図しているのかを明確に意識しましょう。今回のように、同じ構造のブロックを内容だけ変えてシャッフルしたい場合は、timeline_variables を使うのが効果的です。\n演習2-2: 陰謀論信念尺度の項目を timeline_variables でランダム化する\n\n新しい script.js 内で、陰謀論信念尺度の5項目を、上記例のように timeline_variables と randomize_order: true を組み合わせる形で実装してください。\ntimeline 内には、jsPsych.timelineVariable('prompt_text') や jsPsych.timelineVariable('item_name') を使うテンプレートとなるブロック定義を一つだけ置いてください。\nLive Serverで何度も実行し、尺度の項目（「私は、大衆には決して知らされない…」など）の表示順が実行するたびに変わることを確認してみましょう。\n\n\n\n\n\n\n\n\n\n実験や調査のコードを書いていると、同じような構造のブロックを何度も作成することがあります。例えば、似たような質問文のパターンを持つ質問を多数作成する場合などです。このような場合、JavaScriptの「関数」としてブロックの定義をまとめることで、コードをより簡潔に、読みやすく、そして再利用しやすくすることができます。これを「ブロック化」と呼びます。\n\n\n関数は、特定の処理をまとめて名前を付けたものです。引数（ひきすう）を使うことで、関数に渡す値を変えるだけで、異なる内容のブロックを生成できます。\n// 例：汎用的な多肢選択質問ブロックを作成する関数\n// promptText: 質問文\n// optionsArray: 選択肢の配列\n// nameId: データとして保存されるときの名前\nfunction createMultiChoiceQuestion(promptText, optionsArray, nameId) {\n    return { // この関数はjsPsychのブロックオブジェクトを返します\n        type: jsPsychSurveyMultiChoice,\n        questions: [{\n            prompt: promptText,\n            options: optionsArray,\n            name: nameId,\n            required: true // 回答必須とします\n        }],\n        button_label: '次へ' // ボタンのラベルも共通化\n    };\n}\n\n// この関数を使って質問ブロックを作成してみましょう\n// 好きな食べ物に関する質問\nconst fav_food_q = createMultiChoiceQuestion(\n    '好きな食べ物を一つ選んでください:', ['カレー', 'ラーメン', '寿司', 'パスタ'],  'favorite_food'\n);\n\n// 好きな動物に関する質問\nconst fav_animal_q = createMultiChoiceQuestion(\n    '好きな動物を一つ選んでください:', ['犬', '猫', 'うさぎ', '鳥'], 'favorite_animal'\n);\n\n// 全体のタイムラインに追加\ntimeline.push(fav_food_q);\ntimeline.push(fav_animal_q);\n\nfunction createMultiChoiceQuestion(...): これが関数定義で promptText、optionsArray、nameId という3つの引数を受け取ります。\nreturn {...}: この関数は、jsPsychのブロックとしてそのまま使えるオブジェクトを返します。\nメリット:\n\nコードの簡潔化: 同じコードを何度も書く手間が省けます。\n可読性の向上: 関数の名前を見るだけで、そのブロックが何をするのかが分かりやすくなります。\n保守性の向上: もしブロックの共通部分を変更したい場合、関数の定義を一度修正するだけで、その関数を使っているすべてのブロックに反映されます。\n\n\n\n\n\n\n演習3-1: 陰謀論信念尺度の項目を関数でブロック化し、jsPsychSurvey (Rating) で実装する\n\nこれまでの演習で timeline_variables を使うことで、同じ構造の質問をランダムに表示できることを学びました。ここでは、さらに一歩進んで、質問の内容（prompt や name など）だけでなく、質問のタイプ（Rating質問の具体的な設定）も関数を使って共通化し、jsPsychSurvey プラグインで陰謀論信念尺度を実装する例を見てみましょう。\njsPsychSurvey の Rating 質問タイプは、SurveyJSのJSON形式で定義されます。このJSONの一部を関数で生成することで、複数の Rating 質問を効率的に記述できます。\n\n\n// 演習3-1の例：jsPsychSurvey の Rating質問のJSON定義を生成する関数\n// 関数の引数は以下の通り\n//   questionTitle: 質問文\n//   questionName: データとして保存されるときの名前\n//   minDesc, maxDesc: 尺度の一番左と一番右のラベル\n//   rateCount: 評価段階の数\n//   rateValues: 内部的な評価値の配列（例: [1, 2, 3, 4, 5]）\n\nfunction createSurveyJSRatingElement(questionTitle, questionName, minDesc, maxDesc, \n    rateCount, rateValues) {\n    return {\n        \"type\": \"rating\", // Rating質問タイプ\n        \"name\": questionName,\n        \"title\": questionTitle,\n        \"minRateDescription\": minDesc,\n        \"maxRateDescription\": maxDesc,\n        \"rateCount\": rateCount,\n        \"rateValues\": rateValues,\n        \"isRequired\": true // 回答必須\n        \"displayMode\": \"buttons\", // ボタンを水平にする\n    };\n}\n\n// 尺度の共通設定\nconst min_rating_desc = \"0%\";\nconst max_rating_desc = \"100%\";\nconst rate_count_val = 11;\nconst rate_values_val = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]; // 0-100% の10%刻み\n\n// 陰謀論信念尺度の各項目を定義（timeline_variablesに渡すデータ）\nconst conspiracy_items_for_surveyjs = [\n    createSurveyJSRatingElement(\n        '私は、大衆には決して知らされない、とても重大なことが世界で数多く起きていると思う。',\n        'conspiracy_item1_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、政治家はふつう、自分たちの意思決定の本当の動機を教えてはくれないと思う。',\n        'conspiracy_item2_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、政府当局が、全ての市民を厳重に監視していると思う。',\n        'conspiracy_item3_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、表面的には関連のない出来事が、しばしば秘密の活動の結果であると思う。',\n        'conspiracy_item4_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、政治的な決定に強い影響力を与える秘密の組織が存在すると思う。',\n        'conspiracy_item5_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    )\n];\n\n// このJSON要素の配列 conspiracy_items_for_surveyjs を jsPsychSurvey ブロックに渡して表示\n// 配列は survey_json の中の elements 要素として渡される\n\nconst randomized_conspiracy_survey_rating_block = {\n    type: jsPsychSurvey,\n    survey_json: { // ここに直接SurveyJSのJSON構造を定義\n        title: `\n            以下のそれぞれの文章について、あなた自身の意見として、その内容がどの程度\n            正しいと思うかを、以下のスケールに従って示してください。\n        `,\n        description: `\n            この問題に、客観的に見た正解や不正解はありませんので、あなた自身の個人的\n            な意見をお聞かせください。尺度のスケール: 0% - 100% まで 10% 刻み\n        `,\n        elements: conspiracy_items_for_surveyjs, // 関数で生成した質問要素の配列を渡す\n        showCompletedPage: false, // jsPsychのon_finishで処理するため完了ページは表示しない\n        completeText: \"次へ\", // ボタンラベル\n    },\n};\n\n// このブロックをタイムラインに追加\ntimeline.push(randomized_conspiracy_survey_rating_block);\n\nポイント:\n\ncreateSurveyJSRatingElement 関数は、jsPsychSurvey の elements プロパティに渡すための、個々の質問のJSONオブジェクトを生成します。これにより、同じRatingスケール設定を持つ複数の質問を効率的に作成できます。\nconspiracy_items_for_surveyjs という配列に関数で生成した質問要素を格納し、これを randomized_conspiracy_survey_rating_block の survey_json.elements に渡しています。\n注: jsPsychSurvey の内部で elements 配列の質問順序をランダムにしたい場合は、\"questionsOrder\": \"random\" のようなSurveyJSのオプションをsurvey_json 内に追加するか、 conspiracy_items_for_surveyjs 配列をJavaScript側でシャッフルしてから渡す必要があります。 randomize_order: true はjsPsych のタイムラインレベルの並べ替えなので、この jsPsychSurvey ブロック自体の順序には影響しますが、その内部の elements 配列の順序には直接は影響しません。今回の演習ではシャッフルは扱わず、単に 「関数を使って、Rating 質問を複数定義できる」 という点に焦点を当てます。\n\n関数化することで、コードが大幅に短く、かつ変更に強くなったことを実感してください。\n\n\n\n\n\nこれまでに学んだ、様々なプラグインの使い方、タイムラインの階層構造、順序のシャッフル、そしてブロック化（関数の利用）の知識をすべて組み合わせて、より実践的な心理学調査・実験のプロトタイプをscript.jsとして完成させましょう。\n\n\n\nインフォームドコンセント: jsPsychInstructions を使用。\n個人属性の質問: 性別、年齢、国籍（またはその他の簡単な質問）を尋ねます。\n\njsPsychSurveyMultiChoice と jsPsychSurveyText を使用。\nこれらを一つのネストされたタイムラインにまとめると、より整理されます。\n\n尺度教示: 陰謀論信念尺度に入る前の説明。jsPsychInstructions を使用。\n陰謀論信念尺度（比較演習）:\n\n今回は、jsPsychSurveyMultiChoice (timeline_variablesによるランダム化版) と jsPsychSurveyLikert または jsPsychSurvey (Rating) の両方を使って、同じような尺度（例として「感情評価尺度」）を実装し、その比較を実践してみましょう。\nまず、陰謀論信念尺度（または感情評価尺度）をjsPsychSurveyMultiChoice (timeline_variables適用) で実装し、ランダム化と関数化を適用します。\n次に、同じ尺度の項目を、jsPsychSurveyLikert または jsPsychSurvey (Rating) のどちらかの方式を選択して実装し、タイムラインに追加してみましょう。\n両方の尺度ブロックをタイムラインに追加し、それぞれの表示とデータの違いを確認します。\n演習2-2（シャッフル） で学んだ内容を適用し、項目がランダムな順序で表示されるように設定します。\n演習3-1（ブロック化） で学んだ関数を使い、コードを整理します。\n\n終了画面: 実験終了のメッセージ。jsPsychHtmlKeyboardResponse を使用。\n\n\n\n\n\n新しい script.js に、これまでの演習で学んだ内容をすべて適用し、上記の目標とする実験フローを再現するコードを記述してみましょう。\n特に、陰謀論信念尺度の部分について、jsPsychSurveyMultiChoice (timeline_variables適用) 版に加えて、jsPsychSurveyLikert版、またはjsPsychSurvey (Rating) 版のどちらか一つを選択して実装し、タイムラインに追加してみてください。\n関数化され、かつランダムな順序で表示されることを確認してください。\nLive Serverで実行し、期待通りに実験が進行するか、全ての質問が表示されるかを確認しましょう。\nもしエラーが出たら、ブラウザの開発者ツール（Consoleタブ）を確認し、エラーメッセージを参考に修正を試みてください。\n\nヒント: * timeline.push(...) の順番が、ブロックの実行順になります。 * 必要なプラグインファイル（plugin-instructions.js、plugin-html-keyboard-response.js、plugin-survey-text.js、plugin-survey-multi-choice.js、plugin-survey-likert.js、plugin-survey.js など）がindex.htmlにすべて読み込まれていることを再確認してください。\n\n\n\n\n\n実験や調査の最も重要な成果は、参加者から得られたデータです。jsPsychは、参加者の回答や反応時間などのデータを自動的に収集し、ブラウザ上で表示したり、CSVファイルとして簡単にダウンロードしたりする機能を持っています。\n\n\n\n第1回で既に体験したように、実験が終了すると、initJsPsychのon_finish関数で指定したjsPsych.data.displayData()によって、ブラウザ画面に取得されたデータが表示されます。\n表示されるデータはJSON形式（JavaScriptのオブジェクト形式）で、各試行の情報が詳細に記録されています。この形式はプログラミングで扱いやすいですが、人間が直接見て分析するには少し複雑かもしれません。\n\n\n\n\n心理学研究では、データを表計算ソフト（Microsoft ExcelやGoogleスプレッドシートなど）で分析することが多いため、CSV（Comma Separated Values）形式でダウンロードできると非常に便利です。CSV形式は、データをカンマ区切りで保存したテキストファイルで、ほとんどの表計算ソフトで開くことができます。\n\ninitJsPsychのon_finish関数を以下のように変更することで、実験終了時に自動的にCSVファイルが参加者のPCにダウンロードされるようになります。\n// jsPsych のインスタンスを初期化（実験の準備）\nconst jsPsych = initJsPsych({\n    on_finish: function () {\n        jsPsych.data.displayData(); // 画面表示はコメントアウトするか削除します\n        // データをCSV形式でダウンロードする処理\n        jsPsych.data.get().localSave('csv','my_experiment_data_2.csv');\n    }\n});\njsPsych.data.get().localSave(): この関数は、jsPsychがこれまでに収集したすべての実験データをファイルに保存します。\nlocalSave() は2つの引数をもち，1つめはファイル形式 (csv または json)，2つめはファイル名です。ここで指定されたファイル名（例: 'my_experiment_data_2.csv'）で参加者のPCにダウンロードさせる処理を実行します。\nなお，オンライン実験の場合は，参加者の PC にダウンロードさせるのではなく，サーバ側でデータを保存する処理が必要です。そのため，displayData(), localSave() ともに，基本的にはデバッグ目的で使用してください（ただし，参加者を実験室に呼んで対面で実験を行う場合などでは，localSave() を使うことがあります。\n\n\n\n\n\n\n\n\nダウンロードされたmy_experiment_data_2.csv（または指定したファイル名）を、ExcelやGoogleスプレッドシートなどの表計算ソフトで開いてみましょう。\n開いたファイルを確認し、以下の点に注目してください。\n\n各列の意味: trial_type（使用されたプラグインの種類）、rt（反応時間）、response（参加者の回答内容）、internal_node_id（ブロックの識別子）など、様々な情報が記録されています。\n回答データの確認: 特に、各質問ブロックでnameプロパティに指定した名前（例: gender, age, conspiracy_item1など）が列のヘッダーとして表示され、その下に回答内容が記録されているかを確認することが重要です。\njsPsychSurveyLikert と jsPsychSurvey (Rating) で取得されるデータの形式の違い:\n\njsPsychSurveyLikert のデータは、response.質問のname の形で回答が保存されます（例: response.relax_q_likert）。\njsPsychSurvey (Rating) のデータは、response.質問のname の形で保存されますが、その内部の構造がSurveyJSのJSON定義に基づいているため、少し複雑になることがあります。例えば、response.relax_q_surveyjs のように、Ratingの結果がオブジェクト形式で保存される場合があります。CSVに変換されたときにどのように表現されるかを実際に確認し、その違いを理解しましょう。\n\n不要な列の削除: 多くの列がありますが、実際にデータ分析に使うのは一部の列だけかもしれません。分析に不要な列を削除する方法を学びましょう。\n回答のフィルタリングやソート: 特定の回答だけを抽出したり、回答順に並べ替えたりする基本的な操作を試してみましょう。\n\n\n\n\n\n\n新しい script.js の initJsPsych の on_finish 関数を修正し、実験終了時にCSVファイルが自動的にダウンロードされるように変更してください。\nLive Serverで実験を最初から最後まで実行し、ファイルがダウンロードされることを確認してください。\nダウンロードされたCSVファイルをExcelなどの表計算ソフトで開き、インフォームドコンセントの同意、性別、年齢、そして陰謀論信念尺度の各項目に対する回答が正しく記録されているかを確認してみましょう。\n特に、jsPsychSurveyLikertとjsPsychSurvey (Rating) で作成した質問の回答が、CSV上でどのように表示されるかを確認し、その違いを理解することが重要ですす。\n時間があれば、不要な列を削除したり、回答をフィルタリングしたりする基本的なデータ整理の練習をしてみましょう。\n\n補足: 実際の研究では、データを直接ウェブサーバーに保存する（サーバーサイドスクリプトを使う）方法や、jsPsychのデータをより高度に加工・整形する方法など、さらに発展的な技術があります。しかし、まずはCSVでのダウンロードと内容確認を確実にマスターしましょう。"
  },
  {
    "objectID": "jsPsych-02.html#第2回演習の準備---新しいプロジェクトフォルダの作成とファイルパスの理解",
    "href": "jsPsych-02.html#第2回演習の準備---新しいプロジェクトフォルダの作成とファイルパスの理解",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "第1回では、皆さんの作業フォルダの直下に index.html や script.js、style.css、そして jspsych ライブラリのすべてを配置しました。しかし、実際の開発では、プロジェクトごとにファイルを整理することが一般的です。\n第2回では、より実践的なファイル管理を学ぶために、新しいプロジェクトフォルダを作成し、その中に今回の演習用の index.html と script.js, style.css を配置します。\n既存の jspsych ライブラリ（jspsychフォルダ）は、引き続き今回の新しいプロジェクトフォルダの「上の階層」（つまり、作業フォルダの直下）に配置されているものとします。\n\n\nまず、第1回で使ったファイル群がある場所とは別に、新たに第2回用のフォルダを作成しましょう。\n手順:\n\nPCの好きな場所（例: デスクトップやドキュメントフォルダ）で、第1回のファイルが置いてある場所と同じ階層に、新しくフォルダを作成してください。\nフォルダの名前は、例えば jspsych_exercise_2 のように、第2回用であることがわかる名前にしましょう。\n\nあなたの作業フォルダ/  (第1回のファイル群がここにある)\n    ├── index.html       (第1回で作成)\n    ├── script.js        (第1回で作成)\n    ├── style.css        (第1回で作成・共通利用)\n    ├── jspsych/         (第1回で配置・共通利用)\n    │   ├── jspsych.js\n    │   └── ...\n    └── jspsych_exercise_2/  (今回作成するフォルダ)\n\n\n\n\n\n\nファイルパスとは、ファイルやフォルダがコンピュータのどこにあるかを示す「住所」のようなものです。\n\n絶対パス: コンピュータのルート（一番上の階層）から目的のファイルまでの完全な住所を示す方法です。（例: C:\\Users\\YourName\\Documents\\project\\index.html）\n相対パス: 現在いる場所（現在のファイルがある場所）を基準にして、目的のファイルまでの道筋を示す方法です。\n\n今回の演習では、jspsych_exercise_2 フォルダの中に置く index.html から、その「上の階層」にある jspsych フォルダの中のライブラリを参照する必要があります。このときに「相対パス」を使います。\n\n\n\n相対パスで一つ上の階層のフォルダやファイルを参照するには、../ (ドット2つとスラッシュ) を使います。\n例えば、jspsych_exercise_2/index.html から jspsych.js を参照する場合、jspsych.js は jspsych_exercise_2 の一つ上の階層にある jspsych フォルダの中にあるので jspsych.js を参照するには ../jspsych/jspsych.js と記述します。\n\n\n\n今回のフォルダ構成のイメージ:\nあなたの作業フォルダ/  (現在の場所)\n    ├── jspsych/          &lt;-- ここに jspsych ライブラリのフォルダがある\n    │   ├── jspsych.js\n    │   ├── plugin-instructions.js\n    │   └── ...\n    ├── index.html        (第1回用)\n    ├── script.js         (第1回用)\n    ├── style.css         (第1回用)\n    └── jspsych_exercise_2/  &lt;-- 今回の新しい作業フォルダ\n        ├── index.html       &lt;-- このファイルから上の階層を参照する\n        ├── script.js        &lt;-- このファイルは新しいもの\n        └── style.css        &lt;-- このファイルは新しいもの\n\n\n\nそれでは、jspsych_exercise_2 フォルダの中に、新しい index.html ファイルを作成し、必要なライブラリへのパスを修正しましょう。\n手順:\n\nVS Code で、jspsych_exercise_2 フォルダを開きます。\nその中に index.html という名前で新しいファイルを作成します。\n以下のHTMLコードをコピー＆ペーストしてください。特に、href や src のパスが ../ で始まっている点に注目してください。\n\nindex.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;jsPsych 演習2&lt;/title&gt;\n    &lt;link href=\"../jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;link href=\"../jspsych/survey.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"jspsych-display\"&gt;\n    &lt;script src=\"../jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey-likert.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"../jspsych/plugin-survey.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n../jspsych/jspsych.css: index.html のある場所（jspsych_exercise_2）から見て、一つ上の階層にある jspsych フォルダの中の jspsych.css を参照しています。jspsyc.js やそのプラグインも同様です。\n../jspsych/survey.css: こちらも jspsych フォルダの中にあるスタイルファイルですが，後述の surveyJS のためのスタイルを定義したファイルです。もし，survey.css がフォルダ中にない場合は，jsPsych.zip を再度入手して展開し直してください。… https://github.com/jspsych/jsPsych/releases/download/%40jspsych%2Fplugin-survey%402.1.0/jspsych.zip\nstyle.css, script.js: これは index.html と同じ jspsych_exercise_2 フォルダ内に置くので、../ は不要です。\n\n\n\n\n\n\n\n新しい index.html を作成したので、それに合わせて、最低限の動作をする script.js を作成してみましょう。この script.js は、jsPsychを初期化し、空のタイムラインを実行するだけのシンプルなものです。\n手順:\n\nVS Code で、jspsych_exercise_2 フォルダの中に script.js という名前で新しいファイルを作成します。\n以下のJavaScriptコードをコピー＆ペーストしてください。\n\nscript.js\n// jsPsych のインスタンスを初期化し、実験の全体的な設定を行います。\n// ここで jsPsych の基本的な動作を設定します。\nconst jsPsych = initJsPsych({\n    // on_finishは、すべての実験トライアルが終了したときに実行される関数です。\n    // 今回は、実験が完了したときにデータをブラウザに表示するように設定しています。\n    on_finish: function() {\n        jsPsych.data.displayData(); // 実験データをブラウザ画面に表示します。\n        // 後ほど、ここでデータをCSVとしてダウンロードする設定も行います。\n    }\n});\n\n// 実験のタイムラインを定義します。\n// タイムラインは、実行される「ブロック」（質問や指示など）の順序を決定するリストです。\nconst timeline = [];\n\n// 現時点ではタイムラインは空なので、何も表示されません。\n\n// すべてのブロックが定義されたタイムラインを実行して、実験を開始します。\njsPsych.run(timeline);\n\nconst jsPsych = initJsPsych({...}):\n\nこれは、jsPsych を使用するための準備（初期化）を行う最も基本的なコードです。initJsPsych 関数を呼び出すことで、jsPsych の「インスタンス」と呼ばれるものが作成され、jsPsych という変数に格納されます。\non_finish: この設定は、実験がすべて終了したときに自動的に実行される部分です。ここでは jsPsych.data.displayData(); が指定されており、実験完了後に収集されたデータがブラウザ画面に表示されます。\njsPsych の名前は任意です。例えば，const myExperiment = iniJsPsych(); とすると，jsPsych のインスタンスは，myExperiment という変数に格納されます。この場合，on_finish: にある function() 以下は，function() {    myExperiment.data.displayData();} と書きます。\n\nconst timeline = [];:\n\nこれは、実験を構成する個々の「ブロック」（例えば、教示、質問、休憩など）を順序立てて格納するための、空のリスト（JavaScriptでは「配列」と呼びます）です。後ほど、この timeline 配列にブロックを追加していくことで、実験の流れを構築します。\n\njsPsych.run(timeline);:\n\nこのコードが実行されることで、配列 timeline に定義されたブロックが上から順に実行され、jsPsychの実験が開始されます。\n\n\n続いて，同様に style.css を作成します。\n手順:\n\nVS Code で、jspsych_exercise_2 フォルダの中に style.css という名前で新しいファイルを作成します。\n以下の CSS コードをコピー＆ペーストしてください。\n\n\n\n\nstyle.css\n/* style.css */\n\n/* jsPsychの表示領域全体の設定 */\nbody {\n    display: flex; /* Flexbox を使って要素を配置 */\n    justify-content: center; /* 水平方向の中央揃え */\n    align-items: center; /* 垂直方向の中央揃え */\n    min-height: 100vh; /* 画面全体の高さを使用 */\n    margin: 0; /* body の余白をなくす */\n    background-color: #f0f0f0; /* 背景色を設定 */\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* フォントの指定 */\n    color: #333; /* 文字色 */\n}\n\n/* jsPsychが自動生成するコンテンツのスタイル調整 */\n.jspsych-content {\n    text-align: center; /* テキストを中央揃え */\n    margin-bottom: 20px; /* 下に余白 */\n    max-width: 90vw; /* 画面幅の90%が最大幅 */\n    max-height: 90vh; /* 画面高さの90%が最大高さ */\n    width: 100%; /* 親要素の幅に合わせて伸びる */\n    height: 100%; /* 親要素の高さに合わせて伸びる */\n    overflow: auto; /* 内容がはみ出したらスクロールできるようにする */\n    background-color: #fff; /* 背景色 */\n    padding: 20px; /* 内側の余白 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 影 */\n    border-radius: 8px; /* 角を丸くする */\n    box-sizing: border-box; /* paddingやborderを幅・高さに含める */\n}\n\n/* 質問文のスタイル */\n.jspsych-stimulus {\n    font-size: 1.2em; /* フォントサイズを少し大きく */\n    margin-bottom: 25px; /* 下に余白 */\n    line-height: 1.5; /* 行の高さ */\n}\n\n/* 入力フィールドのスタイル */\n.jspsych-survey-text input[type=\"text\"] {\n    width: 80%; /* 幅 */\n    padding: 10px; /* 内側の余白 */\n    margin-top: 10px; /* 上に余白 */\n    font-size: 1em; /* フォントサイズ */\n    border: 1px solid #ccc; /* 枠線 */\n    border-radius: 4px; /* 角を丸くする */\n}\n\n/* ボタンのスタイル */\n.jspsych-btn {\n    background-color: #007bff; /* ボタンの背景色 */\n    color: white; /* 文字色 */\n    padding: 10px 20px; /* 内側の余白 */\n    border: none; /* 枠線をなくす */\n    border-radius: 5px; /* 角を丸くする */\n    cursor: pointer; /* マウスカーソルを指マークに */\n    font-size: 1em; /* フォントサイズ */\n    margin-top: 20px; /* 上に余白 */\n    transition: background-color 0.3s ease; /* ホバー時のアニメーション */\n}\n\n.jspsych-btn:hover {\n    background-color: #0056b3; /* ホバー時の背景色 */\n}\n\n\n\njsPsychを使ったウェブページが期待通りに動かない時、その原因を探るための最も強力なツールの一つが、ブラウザの「開発者ツール (Developer Tools)」です。特に、その中の「コンソール (Console)」と呼ばれる部分には、JavaScriptのエラーメッセージやプログラムからの出力が表示され、問題解決の大きなヒントになります。\nこの資料では、皆さんがよく使う「Google Chrome」と「Microsoft Edge」の2つのブラウザで、JavaScriptコンソールを表示する方法を説明します。\n\n\n\nGoogle Chrome でjsPsychのページを開いている状態で、以下のいずれかの方法で開発者ツールを開き、コンソールを表示できます。\n\n\n\njsPsychのページがChromeで表示されている状態で、キーボードの F12 キー を押します。\n\n(ノートPCによっては Fn キーと同時に F12 を押す必要がある場合があります。)\n\nまたは、Ctrl + Shift + J (Windows) または Cmd + Option + J (Mac) を押します。\n\n\n\n\n\n画面右上のメニューアイコン (…) を開く。\n表示されるメニューの中から「その他のツール」→「デベロッパーツール」を選択します。\n\n\n\n\n\n開発者ツールが画面の片側（通常は右側か下側）に表示されます。\n上部または下部に並んでいるタブの中から「Console (コンソール)」タブを探してクリックします。\n\n\n\n\n\nMicrosoft Edge でも、Google Chrome とほぼ同じ方法で開発者ツールを開き、コンソールを表示できます。\n\n\n\njsPsychのページがEdgeで表示されている状態で、キーボードの F12 キー を押します。\n\n(ノートPCによっては Fn キーと同時に F12 を押す必要がある場合があります。)\n\nまたは、Ctrl + Shift + J (Windows) を押します。\n\n\n\n\n\n画面右上のメニューアイコン (…) を開く。\n表示されるメニューの中から「その他のツール」→「開発者ツール」を選択します。\n\n\n\n\n\n開発者ツールが画面の片側（通常は右側か下側）に表示されます。\n上部または下部に並んでいるタブの中から「Console (コンソール)」タブを探してクリックします。\n\n\n\n\n\nコンソールに赤色の文字でメッセージが表示されている場合、それはJavaScriptのコードに何らかの問題があることを示しています。\n\n例えば、「Uncaught ReferenceError: jsPsychInstructions is not defined」のようなエラーは、「jsPsychInstructions というものが定義されていません」という意味です。これは、対応するプラグインファイル（plugin-instructions.js）が正しく読み込まれていない、または読み込み忘れている可能性を示唆します。\nエラーメッセージは英語ですが、重要なキーワード（not defined、cannot read property of undefined、Failed to load resourceなど）を把握し、どの行でエラーが起きているか（ファイル名と行番号）を確認することが、問題解決の第一歩です。\n\nエラーメッセージを見ることで、より早く原因を特定し、解決に導くことができます。"
  },
  {
    "objectID": "jsPsych-02.html#jspsychの応用とデータ確認-本編",
    "href": "jsPsych-02.html#jspsychの応用とデータ確認-本編",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "第1回でjsPsychの基本的な使い方と環境設定、そして第2回演習のためのプロジェクト準備（新しいフォルダ作成と相対パスの設定）が完了しましたね。ここからは、jsPsychのより高度な機能と、実験データの取得・確認方法について深掘りしていきます。\n\n\n\n\n多様なjsPsychプラグインの特性を理解し、適切に使い分けられるようになる。\n特に、jsPsychSurveyLikert と jsPsychSurvey (Rating質問) の違いと使い分けを理解する。\nタイムラインの階層構造を理解し、複雑な実験フローを設計できるようになる。\n試行の順序をランダム化し、実験デザインの妥当性を高める方法を学ぶ。\nJavaScriptの関数を使って、コードを効率的に「ブロック化」する手法を習得する。\n収集した実験データを正しく確認・ダウンロードし、分析への準備ができるようになる。\n\nこれらのスキルを習得することで、より多様で洗練された心理学の調査や実験を、jsPsychを使って構築できるようになります。"
  },
  {
    "objectID": "jsPsych-02.html#jspsychのプラグインの種類と特性理解",
    "href": "jsPsych-02.html#jspsychのプラグインの種類と特性理解",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "jsPsychが持つ機能は、それぞれの目的に特化した「プラグイン」として提供されています。これにより、様々な種類の実験や調査を柔軟に作成できます。プラグインは、jsPsych本体とは別のJavaScriptファイルとして提供されており、index.htmlで読み込むことで利用可能になります。\n\n\n第1回でも使用した主要なプラグインを、簡単な復習を兼ねて確認しましょう。\n\n\n\n用途: 複数のページにわたる教示文や説明文を表示するために使います。参加者はボタンをクリックしてページを移動します。インフォームドコンセントフォームなど、長いテキスト情報を段階的に見せたい場合に非常に便利です。\n特徴: 長い説明や同意書を表示するのに適しており、前のページに戻ることもできます。\n主なオプション:\n\npages: 表示するHTML文字列の配列。`` や ’’, “” で囲まれた，各配列要素が1ページ分になります。\nbutton_label_next: 次のページへ進むボタンに表示するテキスト。\nbutton_label_previous: 前のページへ戻るボタンに表示するテキスト。\nshow_clickable_nav: ナビゲーションボタン（次へ/戻る）を表示するかどうかをtrueかfalseで指定します。\n\n演習1-1: 練習用の指示ページを作成する\n\nscript.jsを開き、既存のタイムライン（timeline）に新しいブロックを追加してみましょう。\njsPsychInstructionsプラグインを使い、2～3ページ程度の短い指示（例：「準備は良いですか？」「次のページで質問が始まります」など）を作成してみましょう。\nLive Serverで実行し、ボタンをクリックしてページが移動できるか確認してください。\n\n// 演習1-1の例\nconst practice_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;p&gt;この演習セクションでは、簡単な練習問題を行います。&lt;/p&gt;&lt;p&gt;次へ進んでください。&lt;/p&gt;`,\n        `&lt;p&gt;準備ができたら「スタート」ボタンをクリックしてください。&lt;/p&gt;`\n    ],\n    button_label_next: '次へ',\n    button_label_previous: '戻る',\n    show_clickable_nav: true\n};\ntimeline.push(practice_instructions); // タイムラインに追加\n\n\n\n\n\n用途: シンプルなHTMLコンテンツを表示し、特定のキー入力を待つために使います。\n特徴: 実験の開始合図、休憩、短い指示など、参加者にキー操作を求める場面で使われ，反応時間の計測にも利用されます。\n主なオプション:\n\nstimulus: 表示するHTML文字列。\nchoices: 待機するキーの配列。例えば [' '] でスペースキーの入力を待ちます。\"NO_KEYS\"とすると、キー入力を待たずに次のブロックへ自動的に進みます。\ntrial_duration: 刺激を提示する時間（ミリ秒単位）。この時間内にキー入力がなければ次のブロックへ自動的に進みます。指定しない場合はキー入力があるまで続きます。choices: \"NO_KEYS\" と組み合わせると，一定時間経過後に自動的に次のページへ移る（知覚実験で注視点を表示するなど）という機能を実装できます。\n\n演習1-2: キー入力で進む教示を作成する\n\nscript.jsで、jsPsychHtmlKeyboardResponseを使って「スペースキーを押して開始」という指示を作成してみましょう。\nstimulusにはわかりやすい文章を、choicesには[' ']を設定してください。\nこのブロックをタイムラインに追加し、Live Serverで実行して、スペースキーで次へ進めることを確認してください。\n\n// 演習1-2の例\nconst start_trial_prompt = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p&gt;準備ができたら、&lt;strong&gt;スペースキー&lt;/strong&gt;を押して次の質問に進んでください。&lt;/p&gt;`,\n    choices: [' '], // スペースキーの入力を待つ\n};\ntimeline.push(start_trial_prompt); // 必要に応じてタイムラインに追加\n\n\n\n\n\n用途: 参加者からの自由記述形式のテキスト入力を求める質問に使います。\n特徴: 名前、年齢、学年、簡単な意見など、短いテキスト情報を収集するのに適しています。\n主なオプション:\n\nquestions: 質問オブジェクトの配列。\n\nprompt: 参加者に表示する質問文。\nplaceholder: 入力欄に薄く表示されるヒントテキスト（例示）。\nname: 回答データとして保存される際の項目名（キー）です。データ分析時にこの名前で回答を特定します。\nrequired: 回答を必須にする場合はtrue，しない場合は false を設定します。\n\nbutton_label: 次へ進むボタンに表示するテキスト。\n\n演習1-3: 自由記述質問を追加する\n\n第1回で年齢の質問に使ったのがこのプラグインです。改めて、例えば「今日の気分を一言で教えてください」のような質問を追加してみましょう。\nprompt、placeholder、nameを適切に設定してください。\nrequired: trueにして、入力しないと次へ進めないことを確認してみましょう。\n\n\n\n\n\n\n用途: 提示された複数の選択肢の中から、参加者に一つ（または複数）を選ばせる質問に使います。\n特徴: リッカート尺度や、性別、はい/いいえ、特定のカテゴリ選択など、固定された選択肢からの回答を得たい場合に非常に便利です。\n主なオプション:\n\nquestions: 質問オブジェクトの配列。\n\nprompt: 質問文。\noptions: 選択肢の文字列配列。\nname: 回答データを識別するためのキー。\nrequired: 回答を必須にするか (true または false)。\n\nrandomize_question_order: questions 内の質問順序をランダムにするかどうか（trueでランダム）。\nbutton_label: 次へ進むボタンのラベル。\n\n演習1-4: 複数選択質問を追加する\n\n第1回で性別の質問と陰謀論信念尺度に使ったのがこのプラグインです。\n例えば、「好きな季節を一つ選んでください」といった質問を作成してみましょう。\n選択肢を3～4つ程度用意し、optionsに配列として設定してください。\n\n\n\n\n\n\nここからが第2回のメインテーマの一つです。同じような目的（例：評価尺度）を持つプラグインでも、その機能や表現方法は異なります。具体的な比較を通して、プラグインの選定眼を養いましょう。\n\n\n\n用途: 複数のリッカート尺度項目をまとめて、一度に表示し回答させるために特化されたプラグインです。\n特徴: 質問と尺度の選択肢が一覧で表示されるため、連続した尺度項目への回答が直感的でスムーズです。SurveyMultiChoice で一つずつ表示するよりも、連続した尺度項目に適しており、視覚的に整えやすいというメリットがあります。\n主なオプション:\n\nquestions: 質問文の配列。各要素が1つのリッカート尺度項目になります。\nlabels: 尺度の各選択肢のラベル（例: ['全くそう思わない', 'そう思わない', ..., '強くそう思う']）。\nrequired: 各質問の回答を必須にするか。\nrandomize_question_order: questions配列内の質問の表示順をランダムにするか。\n\n演習1-5: 感情評価尺度を jsPsychSurveyLikert で作成する\n\nまず、index.htmlにplugin-survey-likert.jsを読み込む記述が追加されていることを確認してください（先ほど修正済みです）。\nscript.jsに以下の感情評価尺度（例）をjsPsychSurveyLikert　を使って追加してみましょう。尺度のラベルは、['全く当てはまらない', 'あまり当てはまらない', 'どちらでもない', 'やや当てはまる', '非常に当てはまる']とします。\n尺度のラベルは共通なので，jsPsychSurveyLikertプラグインより前に，事前に配列を作っておきます。\n\n// 演習1-5の例：jsPsychSurveyLikertを使った感情評価尺度\nconst emotion_likert_label = [\n        '全く当てはまらない',\n        'あまり当てはまらない',\n        'どちらでもない',\n        'やや当てはまる',\n        '非常に当てはまる'\n];\nconst emotion_likert_scale = {\n    type: jsPsychSurveyLikert,\n    questions: [\n        { prompt: 'Q1. 私は現在、リラックスしている。', name: 'relax_q_likert', labels: emotion_likert_label },\n        { prompt: 'Q2. 私は現在、不安を感じている。', name: 'anxiety_q_likert', labels: emotion_likert_label },\n        { prompt: 'Q3. 私は現在、幸福を感じている。', name: 'happiness_q_likert', labels: emotion_likert_label }\n    ],\n    required: true,\n    randomize_question_order: false, // 今回は順序固定\n    button_label: '次へ'\n};\ntimeline.push(emotion_likert_scale); // タイムラインに追加\n\nLive Serverで実行し、質問と選択肢がどのように表示されるか、一度に全ての項目が表示されるかを確認してください。\n\n\n\n\n\n\n用途: JavaScriptで動く高機能なアンケート作成ツールであるSurveyJSライブラリを、jsPsych内で利用するためのラッパープラグインです。SurveyJSは非常に多機能で、複雑なアンケート設計が可能です。\n特徴:\n\n質問タイプの多様性: テキスト、複数選択、単一選択、リッカート、評価尺度 (Rating)、ランキング、ファイルアップロード、ブール（Yes/No）など、非常に多くの質問形式に対応しています。\n複雑なレイアウトとロジック: 条件分岐、ページ分け、質問グループ化など、高度なアンケート設計が可能です。\n定義方法: 他のプラグインと異なり、survey_jsonオプションにSurveyJS独自のJSON形式で質問を定義します。\n\njsPsychSurveyLikert と jsPsychSurvey (Rating質問) の比較:\n\njsPsychSurveyLikert は、標準的なリッカート尺度をシンプルに実装するのに最適化されており、コードが直感的で記述しやすいです。\njsPsychSurvey の Rating質問 は、より柔軟な評価尺度（例えば、星評価、感情アイコンの選択など）を表現できます。SurveyJS の豊富なカスタマイズオプションを利用できるため、特定のUIや詳細な評価ニーズがある場合に強力です。コードはJSON形式になるため、学習コストはやや高くなりますが、その分、非常に柔軟な表現が可能です。\n\n演習1-6: 感情評価尺度を jsPsychSurvey (Rating) で作成する\n\n重要: まず、index.htmlにplugin-survey.jsを読み込む記述が追加されていることを確認してください（先ほど修正済みです）。\n次に、script.jsに以下の「感情評価尺度」（演習1-5と同じ内容）をjsPsychSurveyプラグインのRating質問タイプを使って追加してみましょう。\n\n// 演習1-6の例：jsPsychSurveyを使った感情評価尺度（Rating質問タイプ）\nconst emotion_survey_rating_scale = {\n    type: jsPsychSurvey,\n    survey_json: {\n        title: \"現在の感情を評価してください\",\n        completeText: '次へ',\n        elements: [\n            {\n                type: \"rating\", // Rating質問タイプを指定\n                name: \"relax_q_surveyjs\",\n                title: \"Q1. 私は現在、リラックスしている。\",\n                minRateDescription: \"全く当てはまらない\",\n                maxRateDescription: \"非常に当てはまる\",\n                rateCount: 5, // 5段階評価\n                rateValues: [1, 2, 3, 4, 5] // 内部的な値 (1から5)\n            },\n            {\n                type: \"rating\",\n                name: \"anxiety_q_surveyjs\",\n                title: \"Q2. 私は現在、不安を感じている。\",\n                minRateDescription: \"全く当てはまらない\",\n                maxRateDescription: \"非常に当てはまる\",\n                rateCount: 5,\n                rateValues: [1, 2, 3, 4, 5]\n            },\n            {\n                type: \"rating\",\n                name: \"happiness_q_surveyjs\",\n                title: \"Q3. 私は現在、幸福を感じている。\",\n                minRateDescription: \"全く当てはまらない\",\n                maxRateDescription: \"非常に当てはまる\",\n                rateCount: 5,\n                rateValues: [1, 2, 3, 4, 5]\n            }\n        ],\n    },\n};\ntimeline.push(emotion_survey_rating_scale); // タイムラインに追加\n\nLive Serverで実行し、jsPsychSurveyLikertとjsPsychSurvey (Rating) の表示形式の違いを確認してください。特に、それぞれの見た目、操作感、そしてデータとして取得される形式（on_finishで表示されるデータ）の違いに注目しましょう。\nなお，jsPsychSurvey は，ボタンのテキストは，jsPsychSurveyLikert と異なり，button_label ではなく，completeText となり，指定場所も survey_json オプションの中で記述します。\n\n\n\n\n\n\njsPsychImageKeyboardResponse (plugin-image-keyboard-response.js):\n\n用途: 画像を画面に提示し、参加者が特定のキーを入力するのを待つ実験で使います。\n特徴: 視覚刺激に対する反応時間測定（例：顔画像を見たときの反応時間）によく使われます。\n\njsPsychAudioButtonResponse (plugin-audio-button-response.js):\n\n用途: 音声を再生し、参加者がボタンをクリックするのを待つ実験で使います。\n特徴: 聴覚刺激に対する反応（例：特定の音が聞こえたらボタンを押す）を測定するのに適しています。"
  },
  {
    "objectID": "jsPsych-02.html#タイムラインの階層構造と順序のシャッフル",
    "href": "jsPsych-02.html#タイムラインの階層構造と順序のシャッフル",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "実験や調査は、常に単純な一直線の流れではありません。特定のブロックを繰り返したり、質問の順番をランダムにしたり、条件によって表示を変えたりすることがよくあります。jsPsychはこれらの複雑なフローをtimelineの機能で柔軟に実現できます。\n\n\njsPsychのtimelineは、ブロックの中にさらに別のタイムラインを定義することで、複雑な構造を持つことができます。これを「ネスト（入れ子）」と呼びます。\n例えば、複数の質問をまとめた「質問セクション」を繰り返し表示したい場合や、練習試行と本試行を分けたい場合などに便利です。timelineプロパティを持つオブジェクト（つまり、単一のブロックではなく、複数のブロックをまとめるためのコンテナ）を作成し、その中にさらにブロックや別のタイムラインを配置します。\n// 例：ネストされたタイムラインの基本構造\n// このブロックセットは、2つの質問（質問Aと質問B）から構成されます\nconst question_block_set = {\n    timeline: [ // このtimelineプロパティの中に、一連のブロックを定義します\n        {\n            type: jsPsychSurveyText,\n            questions: [{ prompt: '質問A: 今日は何をしましたか？', name: 'qA' }]\n        },\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [{ prompt: '質問B: 朝食は食べましたか？', options: ['はい', 'いいえ'], name: 'qB' }]\n        }\n    ]\n};\n\n// 全体のタイムライン\nconst full_timeline = [];\nfull_timeline.push(question_block_set); // 作成した質問セットを全体のタイムラインに追加\nfull_timeline.push(question_block_set); // 同じ質問セットをもう一度追加\n\n// この場合、実験は「質問A → 質問B → 質問A → 質問B」という順序で進みます。\n// 同じブロック定義を再利用できることがポイントです。\n// なお実行の際は，full_timeline を run する必要があります。\n// jsPsych.run(full_timeline)\n\ntimeline プロパティを持つオブジェクト自体も、timeline 配列に追加できる一つの「ブロック」として扱われます。これにより、実験の構造をモジュール化し、管理しやすくなります。\n演習2-1: 質問グループをネスト化する\n\n新しい script.js に、第1回で作成した性別と年齢の質問（および国籍の質問）をまとめて、一つのネストされたタイムラインとして定義してみましょう。\nネストされたタイムラインを personal_info_block のような名前の変数に入れ、timeline.push(personal_info_block); として全体のタイムラインに追加してみてください。\nLive Serverで実行し、動作に変化がないことを確認します（見た目は変わりませんが、内部構造は整理されています）。\n\n\n// 演習2-1の例\nconst personal_info_block = {\n    timeline: [\n        // 性別の質問 (以前のコードから移動)\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [\n                { \n                    prompt: 'あなたの性別を選択してください。', \n                    options: ['男性', '女性', 'その他', '回答したくない'], \n                    name: 'gender', required: true \n                }\n            ],\n            button_label: '次へ進む',\n        },\n        // 年齢の質問 (以前のコードから移動)\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                { \n                    prompt: 'あなたの年齢を入力してください。', \n                    placeholder: '例: 20', \n                    name: 'age', required: true \n                }\n            ],\n            button_label: '次へ進む',\n        },\n        // 国籍の質問 (以前のコードから移動)\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [\n                { \n                    prompt: 'あなたの国籍を選択してください。', \n                    options: ['日本', 'その他の国'], \n                    name: 'nationality', \n                    required: true \n                }],\n            button_label: '次へ進む',\n        }\n    ]\n};\ntimeline.push(personal_info_block); // タイムラインに追加\n\n\n\n心理学の実験では、刺激や質問の提示順序が結果に影響を与える「順序効果」を避けるために、その順序をランダムにすることがよくあります。jsPsychはこれを簡単に行うことができます。\n\nrandomize_order: true オプションと timeline_variables:\n\njsPsychで同じタイプのブロックを、異なる内容で複数回（かつランダムに）実行したい場合に非常に強力な機能が「タイムライン変数（timeline_variables）」です。\ntimeline プロパティを持つオブジェクトに timeline_variables プロパティを追加し、そこに実行したい各試行のデータを配列として定義します。\nそして、timeline プロパティ内のブロック定義で jsPsych.timelineVariable('変数名') を使うことで、timeline_variables から対応する値を取得して表示内容を動的に変更します。\nこの timeline_variables に randomize_order: true オプションを追加することで、timeline_variables の配列の順序がランダムになり、結果として、それぞれの質問項目がランダムな順序で表示されることになります。これは、多項目の尺度をランダム化する際の推奨される設計パターンです。\n\n\n\n\n\n// 例：timeline_variables を使って質問の順番をランダムにする\nconst scale_options_for_multi_choice = [ // このスケールは共有されるので外に定義\n    '0%', '10%', '20%', '30%', '40%', '50%',\n    '60%', '70%', '80%', '90%', '100%'\n];\n\nconst randomized_conspiracy_questions_set = {\n    timeline: [ // ここには、テンプレートとなる単一のブロック定義が入る\n        {\n            type: jsPsychSurveyMultiChoice,\n            questions: [\n                {\n                    prompt: jsPsych.timelineVariable('prompt_text'), // timeline_variablesから動的にプロンプトを取得\n                    options: scale_options_for_multi_choice, // 定義済みのスケールオプションを使用\n                    name: jsPsych.timelineVariable('item_name'), // timeline_variablesから動的に名前を取得\n                    required: true\n                }\n            ],\n            button_label: '次へ'\n        },\n    ],\n    timeline_variables: [ // ここに、各試行でテンプレートに渡したいデータを定義\n        { \n            prompt_text: '私は、大衆には決して知らされない、とても重大なことが世界で数多く起きていると思う。', \n            item_name: 'conspiracy_item1' \n        },\n        { \n            prompt_text: '私は、政治家はふつう、自分たちの意思決定の本当の動機を教えてはくれないと思う。', \n            item_name: 'conspiracy_item2' \n        },\n        { \n            prompt_text: '私は、政府当局が、全ての市民を厳重に監視していると思う。', \n            item_name: 'conspiracy_item3' \n        },\n        { \n            prompt_text: '私は、表面的には関連のない出来事が、しばしば秘密の活動の結果であると思う。', \n            item_name: 'conspiracy_item4' \n        },\n        { \n            prompt_text: '私は、政治的な決定に強い影響力を与える秘密の組織が存在すると思う。', \n            item_name: 'conspiracy_item5' \n        }\n    ],\n    randomize_order: true // このオプションにより、timeline_variablesの順序がランダムになる\n};\ntimeline.push(randomized_conspiracy_questions_set); // タイムラインに追加\n\n注意点: randomize_order: true を設定する際は、それが timeline の直下の子要素のシャッフルを意図しているのか、それとも timeline_variables 内の試行のシャッフルを意図しているのかを明確に意識しましょう。今回のように、同じ構造のブロックを内容だけ変えてシャッフルしたい場合は、timeline_variables を使うのが効果的です。\n演習2-2: 陰謀論信念尺度の項目を timeline_variables でランダム化する\n\n新しい script.js 内で、陰謀論信念尺度の5項目を、上記例のように timeline_variables と randomize_order: true を組み合わせる形で実装してください。\ntimeline 内には、jsPsych.timelineVariable('prompt_text') や jsPsych.timelineVariable('item_name') を使うテンプレートとなるブロック定義を一つだけ置いてください。\nLive Serverで何度も実行し、尺度の項目（「私は、大衆には決して知らされない…」など）の表示順が実行するたびに変わることを確認してみましょう。"
  },
  {
    "objectID": "jsPsych-02.html#ブロック化関数の利用",
    "href": "jsPsych-02.html#ブロック化関数の利用",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "実験や調査のコードを書いていると、同じような構造のブロックを何度も作成することがあります。例えば、似たような質問文のパターンを持つ質問を多数作成する場合などです。このような場合、JavaScriptの「関数」としてブロックの定義をまとめることで、コードをより簡潔に、読みやすく、そして再利用しやすくすることができます。これを「ブロック化」と呼びます。\n\n\n関数は、特定の処理をまとめて名前を付けたものです。引数（ひきすう）を使うことで、関数に渡す値を変えるだけで、異なる内容のブロックを生成できます。\n// 例：汎用的な多肢選択質問ブロックを作成する関数\n// promptText: 質問文\n// optionsArray: 選択肢の配列\n// nameId: データとして保存されるときの名前\nfunction createMultiChoiceQuestion(promptText, optionsArray, nameId) {\n    return { // この関数はjsPsychのブロックオブジェクトを返します\n        type: jsPsychSurveyMultiChoice,\n        questions: [{\n            prompt: promptText,\n            options: optionsArray,\n            name: nameId,\n            required: true // 回答必須とします\n        }],\n        button_label: '次へ' // ボタンのラベルも共通化\n    };\n}\n\n// この関数を使って質問ブロックを作成してみましょう\n// 好きな食べ物に関する質問\nconst fav_food_q = createMultiChoiceQuestion(\n    '好きな食べ物を一つ選んでください:', ['カレー', 'ラーメン', '寿司', 'パスタ'],  'favorite_food'\n);\n\n// 好きな動物に関する質問\nconst fav_animal_q = createMultiChoiceQuestion(\n    '好きな動物を一つ選んでください:', ['犬', '猫', 'うさぎ', '鳥'], 'favorite_animal'\n);\n\n// 全体のタイムラインに追加\ntimeline.push(fav_food_q);\ntimeline.push(fav_animal_q);\n\nfunction createMultiChoiceQuestion(...): これが関数定義で promptText、optionsArray、nameId という3つの引数を受け取ります。\nreturn {...}: この関数は、jsPsychのブロックとしてそのまま使えるオブジェクトを返します。\nメリット:\n\nコードの簡潔化: 同じコードを何度も書く手間が省けます。\n可読性の向上: 関数の名前を見るだけで、そのブロックが何をするのかが分かりやすくなります。\n保守性の向上: もしブロックの共通部分を変更したい場合、関数の定義を一度修正するだけで、その関数を使っているすべてのブロックに反映されます。\n\n\n\n\n\n\n演習3-1: 陰謀論信念尺度の項目を関数でブロック化し、jsPsychSurvey (Rating) で実装する\n\nこれまでの演習で timeline_variables を使うことで、同じ構造の質問をランダムに表示できることを学びました。ここでは、さらに一歩進んで、質問の内容（prompt や name など）だけでなく、質問のタイプ（Rating質問の具体的な設定）も関数を使って共通化し、jsPsychSurvey プラグインで陰謀論信念尺度を実装する例を見てみましょう。\njsPsychSurvey の Rating 質問タイプは、SurveyJSのJSON形式で定義されます。このJSONの一部を関数で生成することで、複数の Rating 質問を効率的に記述できます。\n\n\n// 演習3-1の例：jsPsychSurvey の Rating質問のJSON定義を生成する関数\n// 関数の引数は以下の通り\n//   questionTitle: 質問文\n//   questionName: データとして保存されるときの名前\n//   minDesc, maxDesc: 尺度の一番左と一番右のラベル\n//   rateCount: 評価段階の数\n//   rateValues: 内部的な評価値の配列（例: [1, 2, 3, 4, 5]）\n\nfunction createSurveyJSRatingElement(questionTitle, questionName, minDesc, maxDesc, \n    rateCount, rateValues) {\n    return {\n        \"type\": \"rating\", // Rating質問タイプ\n        \"name\": questionName,\n        \"title\": questionTitle,\n        \"minRateDescription\": minDesc,\n        \"maxRateDescription\": maxDesc,\n        \"rateCount\": rateCount,\n        \"rateValues\": rateValues,\n        \"isRequired\": true // 回答必須\n        \"displayMode\": \"buttons\", // ボタンを水平にする\n    };\n}\n\n// 尺度の共通設定\nconst min_rating_desc = \"0%\";\nconst max_rating_desc = \"100%\";\nconst rate_count_val = 11;\nconst rate_values_val = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]; // 0-100% の10%刻み\n\n// 陰謀論信念尺度の各項目を定義（timeline_variablesに渡すデータ）\nconst conspiracy_items_for_surveyjs = [\n    createSurveyJSRatingElement(\n        '私は、大衆には決して知らされない、とても重大なことが世界で数多く起きていると思う。',\n        'conspiracy_item1_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、政治家はふつう、自分たちの意思決定の本当の動機を教えてはくれないと思う。',\n        'conspiracy_item2_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、政府当局が、全ての市民を厳重に監視していると思う。',\n        'conspiracy_item3_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、表面的には関連のない出来事が、しばしば秘密の活動の結果であると思う。',\n        'conspiracy_item4_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    ),\n    createSurveyJSRatingElement(\n        '私は、政治的な決定に強い影響力を与える秘密の組織が存在すると思う。',\n        'conspiracy_item5_rating',\n        min_rating_desc, max_rating_desc, rate_count_val, rate_values_val\n    )\n];\n\n// このJSON要素の配列 conspiracy_items_for_surveyjs を jsPsychSurvey ブロックに渡して表示\n// 配列は survey_json の中の elements 要素として渡される\n\nconst randomized_conspiracy_survey_rating_block = {\n    type: jsPsychSurvey,\n    survey_json: { // ここに直接SurveyJSのJSON構造を定義\n        title: `\n            以下のそれぞれの文章について、あなた自身の意見として、その内容がどの程度\n            正しいと思うかを、以下のスケールに従って示してください。\n        `,\n        description: `\n            この問題に、客観的に見た正解や不正解はありませんので、あなた自身の個人的\n            な意見をお聞かせください。尺度のスケール: 0% - 100% まで 10% 刻み\n        `,\n        elements: conspiracy_items_for_surveyjs, // 関数で生成した質問要素の配列を渡す\n        showCompletedPage: false, // jsPsychのon_finishで処理するため完了ページは表示しない\n        completeText: \"次へ\", // ボタンラベル\n    },\n};\n\n// このブロックをタイムラインに追加\ntimeline.push(randomized_conspiracy_survey_rating_block);\n\nポイント:\n\ncreateSurveyJSRatingElement 関数は、jsPsychSurvey の elements プロパティに渡すための、個々の質問のJSONオブジェクトを生成します。これにより、同じRatingスケール設定を持つ複数の質問を効率的に作成できます。\nconspiracy_items_for_surveyjs という配列に関数で生成した質問要素を格納し、これを randomized_conspiracy_survey_rating_block の survey_json.elements に渡しています。\n注: jsPsychSurvey の内部で elements 配列の質問順序をランダムにしたい場合は、\"questionsOrder\": \"random\" のようなSurveyJSのオプションをsurvey_json 内に追加するか、 conspiracy_items_for_surveyjs 配列をJavaScript側でシャッフルしてから渡す必要があります。 randomize_order: true はjsPsych のタイムラインレベルの並べ替えなので、この jsPsychSurvey ブロック自体の順序には影響しますが、その内部の elements 配列の順序には直接は影響しません。今回の演習ではシャッフルは扱わず、単に 「関数を使って、Rating 質問を複数定義できる」 という点に焦点を当てます。\n\n関数化することで、コードが大幅に短く、かつ変更に強くなったことを実感してください。"
  },
  {
    "objectID": "jsPsych-02.html#トータルでの作成実践",
    "href": "jsPsych-02.html#トータルでの作成実践",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "これまでに学んだ、様々なプラグインの使い方、タイムラインの階層構造、順序のシャッフル、そしてブロック化（関数の利用）の知識をすべて組み合わせて、より実践的な心理学調査・実験のプロトタイプをscript.jsとして完成させましょう。\n\n\n\nインフォームドコンセント: jsPsychInstructions を使用。\n個人属性の質問: 性別、年齢、国籍（またはその他の簡単な質問）を尋ねます。\n\njsPsychSurveyMultiChoice と jsPsychSurveyText を使用。\nこれらを一つのネストされたタイムラインにまとめると、より整理されます。\n\n尺度教示: 陰謀論信念尺度に入る前の説明。jsPsychInstructions を使用。\n陰謀論信念尺度（比較演習）:\n\n今回は、jsPsychSurveyMultiChoice (timeline_variablesによるランダム化版) と jsPsychSurveyLikert または jsPsychSurvey (Rating) の両方を使って、同じような尺度（例として「感情評価尺度」）を実装し、その比較を実践してみましょう。\nまず、陰謀論信念尺度（または感情評価尺度）をjsPsychSurveyMultiChoice (timeline_variables適用) で実装し、ランダム化と関数化を適用します。\n次に、同じ尺度の項目を、jsPsychSurveyLikert または jsPsychSurvey (Rating) のどちらかの方式を選択して実装し、タイムラインに追加してみましょう。\n両方の尺度ブロックをタイムラインに追加し、それぞれの表示とデータの違いを確認します。\n演習2-2（シャッフル） で学んだ内容を適用し、項目がランダムな順序で表示されるように設定します。\n演習3-1（ブロック化） で学んだ関数を使い、コードを整理します。\n\n終了画面: 実験終了のメッセージ。jsPsychHtmlKeyboardResponse を使用。\n\n\n\n\n\n新しい script.js に、これまでの演習で学んだ内容をすべて適用し、上記の目標とする実験フローを再現するコードを記述してみましょう。\n特に、陰謀論信念尺度の部分について、jsPsychSurveyMultiChoice (timeline_variables適用) 版に加えて、jsPsychSurveyLikert版、またはjsPsychSurvey (Rating) 版のどちらか一つを選択して実装し、タイムラインに追加してみてください。\n関数化され、かつランダムな順序で表示されることを確認してください。\nLive Serverで実行し、期待通りに実験が進行するか、全ての質問が表示されるかを確認しましょう。\nもしエラーが出たら、ブラウザの開発者ツール（Consoleタブ）を確認し、エラーメッセージを参考に修正を試みてください。\n\nヒント: * timeline.push(...) の順番が、ブロックの実行順になります。 * 必要なプラグインファイル（plugin-instructions.js、plugin-html-keyboard-response.js、plugin-survey-text.js、plugin-survey-multi-choice.js、plugin-survey-likert.js、plugin-survey.js など）がindex.htmlにすべて読み込まれていることを再確認してください。"
  },
  {
    "objectID": "jsPsych-02.html#データの確認とダウンロード",
    "href": "jsPsych-02.html#データの確認とダウンロード",
    "title": "jsPsych 演習: 第2回",
    "section": "",
    "text": "実験や調査の最も重要な成果は、参加者から得られたデータです。jsPsychは、参加者の回答や反応時間などのデータを自動的に収集し、ブラウザ上で表示したり、CSVファイルとして簡単にダウンロードしたりする機能を持っています。\n\n\n\n第1回で既に体験したように、実験が終了すると、initJsPsychのon_finish関数で指定したjsPsych.data.displayData()によって、ブラウザ画面に取得されたデータが表示されます。\n表示されるデータはJSON形式（JavaScriptのオブジェクト形式）で、各試行の情報が詳細に記録されています。この形式はプログラミングで扱いやすいですが、人間が直接見て分析するには少し複雑かもしれません。\n\n\n\n\n心理学研究では、データを表計算ソフト（Microsoft ExcelやGoogleスプレッドシートなど）で分析することが多いため、CSV（Comma Separated Values）形式でダウンロードできると非常に便利です。CSV形式は、データをカンマ区切りで保存したテキストファイルで、ほとんどの表計算ソフトで開くことができます。\n\ninitJsPsychのon_finish関数を以下のように変更することで、実験終了時に自動的にCSVファイルが参加者のPCにダウンロードされるようになります。\n// jsPsych のインスタンスを初期化（実験の準備）\nconst jsPsych = initJsPsych({\n    on_finish: function () {\n        jsPsych.data.displayData(); // 画面表示はコメントアウトするか削除します\n        // データをCSV形式でダウンロードする処理\n        jsPsych.data.get().localSave('csv','my_experiment_data_2.csv');\n    }\n});\njsPsych.data.get().localSave(): この関数は、jsPsychがこれまでに収集したすべての実験データをファイルに保存します。\nlocalSave() は2つの引数をもち，1つめはファイル形式 (csv または json)，2つめはファイル名です。ここで指定されたファイル名（例: 'my_experiment_data_2.csv'）で参加者のPCにダウンロードさせる処理を実行します。\nなお，オンライン実験の場合は，参加者の PC にダウンロードさせるのではなく，サーバ側でデータを保存する処理が必要です。そのため，displayData(), localSave() ともに，基本的にはデバッグ目的で使用してください（ただし，参加者を実験室に呼んで対面で実験を行う場合などでは，localSave() を使うことがあります。\n\n\n\n\n\n\n\n\nダウンロードされたmy_experiment_data_2.csv（または指定したファイル名）を、ExcelやGoogleスプレッドシートなどの表計算ソフトで開いてみましょう。\n開いたファイルを確認し、以下の点に注目してください。\n\n各列の意味: trial_type（使用されたプラグインの種類）、rt（反応時間）、response（参加者の回答内容）、internal_node_id（ブロックの識別子）など、様々な情報が記録されています。\n回答データの確認: 特に、各質問ブロックでnameプロパティに指定した名前（例: gender, age, conspiracy_item1など）が列のヘッダーとして表示され、その下に回答内容が記録されているかを確認することが重要です。\njsPsychSurveyLikert と jsPsychSurvey (Rating) で取得されるデータの形式の違い:\n\njsPsychSurveyLikert のデータは、response.質問のname の形で回答が保存されます（例: response.relax_q_likert）。\njsPsychSurvey (Rating) のデータは、response.質問のname の形で保存されますが、その内部の構造がSurveyJSのJSON定義に基づいているため、少し複雑になることがあります。例えば、response.relax_q_surveyjs のように、Ratingの結果がオブジェクト形式で保存される場合があります。CSVに変換されたときにどのように表現されるかを実際に確認し、その違いを理解しましょう。\n\n不要な列の削除: 多くの列がありますが、実際にデータ分析に使うのは一部の列だけかもしれません。分析に不要な列を削除する方法を学びましょう。\n回答のフィルタリングやソート: 特定の回答だけを抽出したり、回答順に並べ替えたりする基本的な操作を試してみましょう。\n\n\n\n\n\n\n新しい script.js の initJsPsych の on_finish 関数を修正し、実験終了時にCSVファイルが自動的にダウンロードされるように変更してください。\nLive Serverで実験を最初から最後まで実行し、ファイルがダウンロードされることを確認してください。\nダウンロードされたCSVファイルをExcelなどの表計算ソフトで開き、インフォームドコンセントの同意、性別、年齢、そして陰謀論信念尺度の各項目に対する回答が正しく記録されているかを確認してみましょう。\n特に、jsPsychSurveyLikertとjsPsychSurvey (Rating) で作成した質問の回答が、CSV上でどのように表示されるかを確認し、その違いを理解することが重要ですす。\n時間があれば、不要な列を削除したり、回答をフィルタリングしたりする基本的なデータ整理の練習をしてみましょう。\n\n補足: 実際の研究では、データを直接ウェブサーバーに保存する（サーバーサイドスクリプトを使う）方法や、jsPsychのデータをより高度に加工・整形する方法など、さらに発展的な技術があります。しかし、まずはCSVでのダウンロードと内容確認を確実にマスターしましょう。"
  }
]